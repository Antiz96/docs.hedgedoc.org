{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the HedgeDoc Documentation","text":"<p>HedgeDoc lets you create real-time collaborative markdown notes. You can test-drive it by visiting our HedgeDoc demo server.</p> <p>It is inspired by Hackpad, Etherpad and similar collaborative editors. This project originated with the team at HackMD and now forked into its own organization. A longer write-up can be read in the history doc or you can have a look at an explanatory graph over at our website.</p> <p>If you have any questions that aren't answered here, feel free to ask us on Matrix, stop by our community forums or have a look at our FAQ.</p>"},{"location":"configuration/","title":"Configuration","text":"<p>You can choose to configure HedgeDoc with either a config file or with environment variables.</p> <p>Environment variables take precedence over configurations from the config files. They generally start with <code>CMD_</code> for our own options, but we also list node-specific options you can configure this way.</p> <ul> <li>Environment variables are processed in <code>lib/config/environment.js</code> - so this is the first place to look if anything is missing not obvious from this document. The default values are defined in <code>lib/config/default.js</code>, in case you wonder if you even need to override it.</li> </ul> <ul> <li>The config file is processed in <code>lib/config/index.js</code> - so this is the first place to look if anything is missing not obvious from this document. The default values are defined in <code>lib/config/default.js</code>, in case you wonder if you even need to override it. To get started, it is a good idea to take the <code>config.json.example</code> and copy it to <code>config.json</code> before filling in your own details.</li> </ul> <p>Note: Due to the rename process we renamed all <code>HMD_</code>-prefix variables to be <code>CMD_</code>-prefixed. The old ones continue to work.</p>"},{"location":"configuration/#nodejs","title":"Node.JS","text":"config file environment default and example value description <code>NODE_ENV</code> <code>production</code> or <code>development</code> set current environment (will apply corresponding settings in the <code>config.json</code>) <code>debug</code> <code>DEBUG</code> <code>true</code> or <code>false</code> set debug mode, show more logs"},{"location":"configuration/#hedgedoc-basics","title":"HedgeDoc basics","text":"config file environment default and example value description <code>CMD_CONFIG_FILE</code> no default, <code>/path/to/config.json</code> optional override for the path to HedgeDoc's config file <code>db</code> <code>undefined</code>, <code>{ \"dialect\": \"sqlite\", \"storage\": \"./db.hedgedoc.sqlite\" }</code> set the db configs, see more here <code>db.username</code> <code>CMD_DB_USERNAME</code> <code>undefined</code>, <code>hedgedoc-db-user</code> Username used to authenticate to the database (host). <code>db.password</code> <code>CMD_DB_PASSWORD</code> <code>undefined</code> Password used to authenticate to the database (host). <code>db.database</code> <code>CMD_DB_DATABASE</code> <code>undefined</code>, <code>hedgedoc</code> Name of the database used to store hedgedoc data. <code>db.host</code> <code>CMD_DB_HOST</code> <code>undefined</code>, <code>db-host.example.com</code> Hostname used to connect the database server. <code>db.post</code> <code>CMD_DB_PORT</code> <code>undefined</code>, <code>5432</code> Port used to connect the database server. <code>db.dialect</code> <code>CMD_DB_DIALECT</code> <code>undefined</code>, <code>postgres</code>, <code>mariadb</code> Dialect / protocol used to connect to the database. <code>dbURL</code> <code>CMD_DB_URL</code> <code>undefined</code>, <code>postgres://username:password@localhost:5432/hedgedoc</code> or <code>mysql://username:password@localhost:3306/hedgedoc</code> Set the db in URL style. If set, then the relevant <code>db</code> config entries will be overridden. <code>loglevel</code> <code>CMD_LOGLEVEL</code> <code>info</code>, <code>debug</code> ... Defines what kind of logs are provided to stdout. Available options: <code>debug</code>, <code>verbose</code>, <code>info</code>, <code>warn</code>, <code>error</code> <code>forbiddenNoteIDs</code> <code>CMD_FORBIDDEN_NOTE_IDS</code> <code>['robots.txt', 'favicon.ico', 'api', 'build', 'css', 'docs', 'fonts', 'js', 'uploads', 'vendor', 'views']</code>, <code>['robots.txt']</code> or <code>'robots.txt'</code> disallow creation of notes, even if <code>allowFreeUrl</code> or <code>CMD_ALLOW_FREEURL</code> is <code>true</code> <code>imageUploadType</code> <code>CMD_IMAGE_UPLOAD_TYPE</code> <code>filesystem</code>, <code>imgur</code>, <code>s3</code>, <code>minio</code>, <code>azure</code>, <code>lutim</code> Where to upload images. For S3, see our Image Upload Guides for S3 or Minio, also there's a whole section on their respective env vars below. <code>sourceURL</code> <code>CMD_SOURCE_URL</code> no default, <code>https://github.com/hedgedoc/hedgedoc/tree/&lt;current commit&gt;</code> Provides the link to the source code of HedgeDoc on the entry page (Please, make sure you change this when you run a modified version) <code>tooBusyLag</code> <code>CMD_TOOBUSY_LAG</code> <code>70</code> CPU time for one event loop tick until node throttles connections. (milliseconds) <code>staticCacheTime</code> <code>1 * 24 * 60 * 60 * 1000</code> static file cache time <code>heartbeatInterval</code> <code>5000</code> socket.io heartbeat interval <code>heartbeatTimeout</code> <code>10000</code> socket.io heartbeat timeout <code>documentMaxLength</code> <code>CMD_DOCUMENT_MAX_LENGTH</code> <code>100000</code> note max length <code>linkifyHeaderStyle</code> <code>keep-case</code>, <code>lower-case</code>, <code>gfm</code> how is a header text converted into a link id <code>enableStatsApi</code> <code>CMD_ENABLE_STATS_API</code> <code>true</code>, <code>false</code> Enables or disables the /status and /metrics endpoint."},{"location":"configuration/#hedgedoc-paths-stuff","title":"HedgeDoc paths stuff","text":"<p>these are rarely used for various reasons.</p> config file environment default and example values description <code>defaultNotePath</code> <code>./public/default.md</code> default note file path1, empty notes will be created with this template. <code>dhParamPath</code> <code>undefined</code>, <code>./cert/dhparam.pem</code> SSL dhparam path1 (only need when you set <code>useSSL</code>) <code>sslCAPath</code> <code>undefined</code>, <code>['./cert/COMODORSAAddTrustCA.crt']</code> SSL ca chain1 (only need when you set <code>useSSL</code>) <code>sslCertPath</code> <code>undefined</code>, <code>./cert/hedgedoc_io.crt</code> SSL cert path1 (only need when you set <code>useSSL</code>) <code>sslKeyPath</code> <code>undefined</code>, <code>./cert/client.key</code> SSL key path1 (only need when you set <code>useSSL</code>) <code>tmpPath</code> <code>os.tmpdir()</code>, <code>./tmp/</code> temp directory path1 <code>docsPath</code> <code>./public/docs</code> docs directory path1 <code>viewPath</code> <code>./public/views</code> template directory path1 <code>uploadsPath</code> <code>./public/uploads</code> uploads directory1 - needs to be persistent when you use imageUploadType <code>filesystem</code> <p>Note: relative paths are based on HedgeDoc's base directory</p>"},{"location":"configuration/#hedgedoc-location","title":"HedgeDoc Location","text":"config file environment default and example value description <code>domain</code> <code>CMD_DOMAIN</code> <code>null</code>, <code>localhost</code>, <code>hedgedoc.org</code> domain name <code>urlPath</code> <code>CMD_URL_PATH</code> <code>null</code>, <code>hedgedoc</code> If HedgeDoc is run from a subdirectory like <code>www.example.com/&lt;urlpath&gt;</code> <code>host</code> <code>CMD_HOST</code> <code>0.0.0.0</code>, <code>localhost</code> interface/ip to listen on <code>port</code> <code>CMD_PORT</code> <code>3000</code>, <code>80</code> port to listen on <code>path</code> <code>CMD_PATH</code> no default, <code>/var/run/hedgedoc.sock</code> path to UNIX domain socket to listen on (if specified, <code>host</code> or <code>CMD_HOST</code> and <code>port</code> or <code>CMD_PORT</code> are ignored) <code>protocolUseSSL</code> <code>CMD_PROTOCOL_USESSL</code> <code>false</code> or <code>true</code> set to use SSL protocol for resources path (only applied when domain is set) <code>useSSL</code> <code>false</code> or <code>true</code> set to use SSL server (if <code>true</code>, will auto turn on <code>protocolUseSSL</code>) <code>urlAddPort</code> <code>CMD_URL_ADDPORT</code> <code>false</code> or <code>true</code> set to add port on callback URL (ports <code>80</code> or <code>443</code> won't be applied) (only applied when domain is set) <code>allowOrigin</code> <code>CMD_ALLOW_ORIGIN</code> <code>['localhost']</code>, <code>['hedgedoc.org']</code>, <code>['localhost', 'hedgedoc.org']</code> domain name whitelist (use comma to separate)"},{"location":"configuration/#web-security-aspects","title":"Web security aspects","text":"config file environment default and example value description <code>hsts</code> <code>{\"enable\": true, \"maxAgeSeconds\": 31536000, \"includeSubdomains\": true, \"preload\": true}</code> HSTS options to use with HTTPS (default is the example value, max age is a year) <code>CMD_HSTS_ENABLE</code> <code>true</code> or <code>false</code> set to enable HSTS if HTTPS is also enabled (default is <code>true</code>) <code>CMD_HSTS_INCLUDE_SUBDOMAINS</code> <code>true</code> or <code>false</code> set to include subdomains in HSTS (default is <code>true</code>) <code>CMD_HSTS_MAX_AGE</code> <code>31536000</code>, <code>60 * 60 * 24 * 365</code> max duration in seconds to tell clients to keep HSTS status (default is a year) <code>CMD_HSTS_PRELOAD</code> <code>true</code> or <code>false</code> whether to allow preloading of the site's HSTS status (e.g. into browsers) <code>csp</code> <code>{\"enable\": true, \"addDefaults\": true}</code> Nested object to configure the Content Security Policy <code>csp.enable</code> <code>CMD_CSP_ENABLE</code> <code>true</code> or <code>false</code> Whether to apply a <code>Content-Security-Policy</code> header to responses. We don't recommend disabling this option, as it significantly reduces the security of the application. <code>csp.addDefaults</code> <code>true</code> or <code>false</code> Disable to not include the default CSP. Be careful, this will break the application if the correct directives are not set manually. <code>csp.directives</code> no default, <code>{\"scriptSrc\": \"trustworthy-scripts.example.com\"}</code> Custom CSP directives. These are passed to Helmet - see their documentation for more information on the format. <code>csp.addDisqus</code> <code>CMD_CSP_ADD_DISQUS</code> <code>false</code> or <code>true</code> Enable to allow users to add Disqus comments to their notes or presentations. We don't recommend enabling this option, as it increases the attack surface of XSS attacks. <code>csp.addGoogleAnalytics</code> <code>CMD_CSP_ADD_GOOGLE_ANALYTICS</code> <code>false</code> or <code>true</code> Enable to allow users to add Google Analytics to their notes. We don't recommend enabling this option, as it increases the attack surface of XSS attacks. <code>csp.upgradeInsecureRequests</code> <code>auto</code> or <code>true</code> or <code>false</code> By default (<code>auto</code>), insecure (HTTP) requests are upgraded to HTTPS via CSP if <code>useSSL</code> is on. To change this behaviour, set to either <code>true</code> or <code>false</code>. <code>csp.reportUri</code> <code>CMD_CSP_REPORTURI</code> <code>undefined</code>, <code>https://&lt;someid&gt;.report-uri.com/r/d/csp/enforce</code> Allows to add a URL for CSP reports in case of violations. <code>csp.allowFraming</code> <code>CMD_CSP_ALLOW_FRAMING</code> <code>true</code> or <code>false</code> Disable to disallow embedding of the instance via iframe. We strongly recommend disabling this option, as it increases the attack surface of XSS attacks. <code>csp.allowPDFEmbed</code> <code>CMD_CSP_ALLOW_PDF_EMBED</code> <code>true</code> or <code>false</code> Disable to disallow embedding PDFs. We recommend disabling this option, as it increases the attack surface of XSS attacks. <code>cookiePolicy</code> <code>CMD_COOKIE_POLICY</code> <code>lax</code>, <code>strict</code> or <code>none</code> Set a SameSite policy whether cookies are send from cross-origin. Be careful: setting a SameSite value of none without https breaks the editor."},{"location":"configuration/#privacy-and-external-requests","title":"Privacy and External Requests","text":"config file environment default and example value description <code>allowGravatar</code> <code>CMD_ALLOW_GRAVATAR</code> <code>true</code> or <code>false</code> set to <code>false</code> to disable Libravatar as profile picture source on your instance. Libravatar is a federated open-source alternative to Gravatar."},{"location":"configuration/#users-and-privileges","title":"Users and Privileges","text":"config file environment default and example value description <code>allowAnonymous</code> <code>CMD_ALLOW_ANONYMOUS</code> <code>true</code> or <code>false</code> Set to allow anonymous usage (default is <code>true</code>). <code>allowAnonymousEdits</code> <code>CMD_ALLOW_ANONYMOUS_EDITS</code> <code>false</code> or <code>true</code> If <code>allowAnonymous</code> is <code>false</code>: allow users to select <code>freely</code> permission, allowing guests to edit existing notes (default is <code>false</code>). <code>allowFreeURL</code> <code>CMD_ALLOW_FREEURL</code> <code>false</code> or <code>true</code> Set to allow new note creation by accessing a nonexistent note URL. This is the behavior familiar from Etherpad. <code>requireFreeURLAuthentication</code> <code>CMD_REQUIRE_FREEURL_AUTHENTICATION</code> <code>false</code> or <code>true</code> Set to require authentication for FreeURL mode style note creation. <code>defaultPermission</code> <code>CMD_DEFAULT_PERMISSION</code> <code>editable</code>, <code>freely</code>, <code>limited</code>, <code>locked</code>, <code>protected</code> or <code>private</code> Set notes default permission (only applied on signed-in users). <code>sessionName</code> <code>connect.sid</code> Cookie session name. <code>sessionLife</code> <code>CMD_SESSION_LIFE</code> <code>14 * 24 * 60 * 60 * 1000</code>, <code>1209600000</code> (14 days) Cookie session life time in milliseconds. <code>sessionSecret</code> <code>CMD_SESSION_SECRET</code> <code>secret</code> Cookie session secret used to sign the session cookie. If none is set, one will randomly generated on each startup, meaning all your users will be logged out. Can be generated with e.g. <code>pwgen -s 64 1</code>."},{"location":"configuration/#login-methods","title":"Login methods","text":""},{"location":"configuration/#email-local-account","title":"Email (local account)","text":"config file environment default and example value description <code>email</code> <code>CMD_EMAIL</code> <code>true</code> or <code>false</code> Set to allow email sign-in. The default is <code>true</code>. <code>allowEmailRegister</code> <code>CMD_ALLOW_EMAIL_REGISTER</code> <code>true</code> or <code>false</code> Set to allow registration of new accounts using an email address. If set to <code>false</code>, you can still create accounts using the command line - see <code>bin/manage_users</code> for details (In production mode, remember to run it with <code>NODE_ENV</code> set as <code>production</code> in the enviroment). This setting has no effect if <code>email</code> or <code>CMD_EMAIL</code> is <code>false</code>. The default for <code>allowEmailRegister</code> or <code>CMD_ALLOW_EMAIL_REGISTER</code> is <code>true</code>."},{"location":"configuration/#dropbox-login","title":"Dropbox Login","text":"config file environment default and example value description <code>dropbox</code> <code>{clientID: ..., clientSecret: ...}</code> An object containing the client ID and the client secret obtained by the Dropbox developer tools <code>CMD_DROPBOX_CLIENTID</code> no default Dropbox API client id <code>CMD_DROPBOX_CLIENTSECRET</code> no default Dropbox API client secret"},{"location":"configuration/#facebook-login","title":"Facebook Login","text":"config file environment default and example value description <code>facebook</code> <code>{clientID: ..., clientSecret: ...}</code> An object containing the client ID and the client secret obtained by the Facebook app console <code>CMD_FACEBOOK_CLIENTID</code> no default Facebook API client id <code>CMD_FACEBOOK_CLIENTSECRET</code> no default Facebook API client secret"},{"location":"configuration/#github-login","title":"GitHub Login","text":"config file environment default and example value description <code>github</code> <code>{clientID: ..., clientSecret: ...}</code> An object containing the client ID and the client secret obtained by the GitHub developer page. For more details have a look at the GitHub auth guide. <code>CMD_GITHUB_CLIENTID</code> no default GitHub API client id <code>CMD_GITHUB_CLIENTSECRET</code> no default GitHub API client secret"},{"location":"configuration/#gitlab-login","title":"GitLab Login","text":"config file environment default and example value description <code>gitlab</code> <code>{baseURL: ..., scope: ..., version: ..., clientID: ..., clientSecret: ...}</code> An object containing your GitLab application data. Refer to the GitLab guide for more details! <code>CMD_GITLAB_SCOPE</code> no default, <code>read_user</code> or <code>api</code> GitLab API requested scope (default is <code>api</code>) (GitLab snippet import/export need <code>api</code> scope) <code>CMD_GITLAB_BASEURL</code> no default GitLab authentication endpoint, set to use other endpoint than GitLab.com (optional) <code>CMD_GITLAB_CLIENTID</code> no default GitLab API client id <code>CMD_GITLAB_CLIENTSECRET</code> no default GitLab API client secret <code>CMD_GITLAB_VERSION</code> <code>v4</code> GitLab API version (v3 or v4)"},{"location":"configuration/#google-login","title":"Google Login","text":"config file environment default and example value description <code>google</code> <code>{clientID: ..., clientSecret: ..., hostedDomain: ...}</code> An object containing the client ID and the client secret obtained by the Google API console <code>CMD_GOOGLE_CLIENTID</code> no default Google API client id <code>CMD_GOOGLE_CLIENTSECRET</code> no default Google API client secret <code>CMD_GOOGLE_HOSTEDDOMAIN</code> no default, <code>example.com</code> Provided only if the user belongs to a hosted domain. default is <code>undefined</code>"},{"location":"configuration/#ldap-login","title":"LDAP Login","text":"config file environment default and example value description <code>ldap</code> <code>{providerName: ..., url: ..., bindDn: ..., bindCredentials: ..., searchBase: ..., searchFilter: ..., searchAttributes: ..., usernameField: ..., useridField: ..., tlsca: ...}</code> An object detailing the LDAP connection. Refer to the LDAP-AD guide for more details! <code>CMD_LDAP_URL</code> no default, <code>ldap://example.com</code> URL of LDAP server <code>CMD_LDAP_BINDDN</code> no default bindDn for LDAP access <code>CMD_LDAP_BINDCREDENTIALS</code> no default, bindCredentials for LDAP access <code>CMD_LDAP_SEARCHBASE</code> no default, <code>o=users,dc=example,dc=com</code> LDAP directory to begin search from <code>CMD_LDAP_SEARCHFILTER</code> no default, <code>(uid={{username}})</code> LDAP filter to search with <code>CMD_LDAP_SEARCHATTRIBUTES</code> no default, <code>displayName, mail</code> LDAP attributes to search with (use comma to separate) <code>CMD_LDAP_USERIDFIELD</code> no default, <code>uidNumber</code> or <code>uid</code> or <code>sAMAccountName</code> The LDAP field which is used uniquely identify a user on HedgeDoc <code>CMD_LDAP_USERNAMEFIELD</code> no default, fallback to userid The LDAP field which is used as the username on HedgeDoc <code>CMD_LDAP_TLS_CA</code> no default, <code>server-cert.pem, root.pem</code> Root CA for LDAP TLS in PEM format (use comma to separate) <code>CMD_LDAP_PROVIDERNAME</code> no default, <code>My institution</code> Optional name to be displayed at login form indicating the LDAP provider"},{"location":"configuration/#mattermost-login","title":"Mattermost Login","text":"config file environment default and example value description <code>mattermost</code> <code>{baseURL: ..., clientID: ..., clientSecret: ...}</code> An object containing the base URL of your Mattermost application data. Refer to the Mattermost guide for more details! <code>CMD_MATTERMOST_BASEURL</code> no default Mattermost authentication endpoint for versions below 5.0. For Mattermost version 5.0 and above, see guide. <code>CMD_MATTERMOST_CLIENTID</code> no default Mattermost API client id <code>CMD_MATTERMOST_CLIENTSECRET</code> no default Mattermost API client secret"},{"location":"configuration/#oauth2-login","title":"OAuth2 Login","text":"config file environment default and example value description <code>oauth2</code> <code>{baseURL: ..., userProfileURL: ..., userProfileUsernameAttr: ..., userProfileDisplayNameAttr: ..., userProfileEmailAttr: ..., tokenURL: ..., authorizationURL: ..., clientID: ..., clientSecret: ..., scope: ...}</code> An object detailing your OAuth2 provider. Refer to the Mattermost or Nextcloud examples for more details! <code>CMD_OAUTH2_USER_PROFILE_URL</code> no default, <code>https://example.com</code> Where to retrieve information about a user after successful login. Needs to output JSON. (no default value) Refer to the Mattermost or Nextcloud examples for more details on all of the <code>CMD_OAUTH2...</code> options. <code>CMD_OAUTH2_USER_PROFILE_USERNAME_ATTR</code> no default, <code>name</code> where to find the username in the JSON from the user profile URL. (no default value) <code>CMD_OAUTH2_USER_PROFILE_DISPLAY_NAME_ATTR</code> no default, <code>display-name</code> where to find the display-name in the JSON from the user profile URL. (no default value) <code>CMD_OAUTH2_USER_PROFILE_EMAIL_ATTR</code> no default, <code>email</code> where to find the email address in the JSON from the user profile URL. (no default value) <code>CMD_OAUTH2_USER_PROFILE_ID_ATTR</code> no default, <code>user_uuid</code> where to find the dedicated user ID (optional, overrides <code>CMD_OAUTH2_USER_PROFILE_USERNAME_ATTR</code>) <code>CMD_OAUTH2_TOKEN_URL</code> no default, <code>https://example.com</code> sometimes called token endpoint, please refer to the documentation of your OAuth2 provider (no default value) <code>CMD_OAUTH2_AUTHORIZATION_URL</code> no default, <code>https://example.com</code> authorization URL of your provider, please refer to the documentation of your OAuth2 provider (no default value) <code>CMD_OAUTH2_CLIENT_ID</code> no default, <code>afae02fckafd...</code> you will get this from your OAuth2 provider when you register HedgeDoc as OAuth2-client, (no default value) <code>CMD_OAUTH2_CLIENT_SECRET</code> no default, <code>afae02fckafd...</code> you will get this from your OAuth2 provider when you register HedgeDoc as OAuth2-client, (no default value) <code>CMD_OAUTH2_PROVIDERNAME</code> no default, <code>My institution</code> Optional name to be displayed at login form indicating the oAuth2 provider <code>CMD_OAUTH2_SCOPE</code> no default, <code>openid email profile</code> Scope to request for OIDC (OpenID Connect) providers. <code>CMD_OAUTH2_ROLES_CLAIM</code> no default, <code>roles</code> ID token claim, which is supposed to provide an array of strings of roles <code>CMD_OAUTH2_ACCESS_ROLE</code> no default, <code>role/hedgedoc</code> The role which should be included in the ID token roles claim to grant access <p>Info</p> <p>If you are using a CA not trusted by Node.js (like Let's Encrypt e.g) for your OAuth2 provider you can set the <code>NODE_EXTRA_CA_CERTS</code> environment variable to the CA certificate file path of your CA. Remember to also make the file available inside the Docker container, if you're running HedgeDoc in Docker container.</p>"},{"location":"configuration/#saml-login","title":"SAML Login","text":"config file environment default and example value description <code>saml</code> <code>{idpSsoUrl: ..., idpCert: ..., clientCert: ..., issuer: ..., identifierFormat: ..., disableRequestedAuthnContext: ..., groupAttribute: ..., externalGroups: [], requiredGroups: [], attribute: {id: ..., username: ..., email: ...}}</code> An object detailing your SAML provider. Refer to the OneLogin and SAML guides for more details! <code>CMD_SAML_IDPSSOURL</code> no default, <code>https://idp.example.com/sso</code> authentication endpoint of IdP. for details, see guide. <code>CMD_SAML_IDPCERT</code> no default, <code>/path/to/cert.pem</code> certificate file path of IdP in PEM format <code>CMD_SAML_CLIENTCERT</code> no default, <code>/path/to/privatecert.pem</code> certificate file path for the client in PEM format (optional) <code>CMD_SAML_ISSUER</code> no default Issuer to supply to identity provider (optional, default: <code>serverURL</code> config)\" <code>CMD_SAML_DISABLEREQUESTEDAUTHNCONTEXT</code> no default, <code>true</code> or <code>false</code> true to allow any authentication method, false restricts to password authentication (PasswordProtectedTransport) method (default: false) <code>CMD_SAML_IDENTIFIERFORMAT</code> <code>urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress</code> name identifier format (optional, default: <code>urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress</code>) <code>CMD_SAML_GROUPATTRIBUTE</code> no default, <code>memberOf</code> attribute name for group list (optional) <code>CMD_SAML_REQUIREDGROUPS</code> no default, <code>hedgedoc-users</code> group names that allowed (use vertical bar to separate) (optional) <code>CMD_SAML_EXTERNALGROUPS</code> no default, <code>Temporary-staff</code> group names that not allowed (use vertical bar to separate) (optional) <code>CMD_SAML_ATTRIBUTE_ID</code> no default, <code>sAMAccountName</code> attribute map for <code>id</code> (optional, default: NameID of SAML response) <code>CMD_SAML_ATTRIBUTE_USERNAME</code> no default, <code>mailNickname</code> attribute map for <code>username</code> (optional, default: NameID of SAML response) <code>CMD_SAML_ATTRIBUTE_EMAIL</code> no default, <code>mail</code> attribute map for <code>email</code> (optional, default: NameID of SAML response if <code>CMD_SAML_IDENTIFIERFORMAT</code> is default) <code>CMD_SAML_PROVIDERNAME</code> no default, <code>My institution</code> Optional name to be displayed at login form indicating the SAML provider"},{"location":"configuration/#twitter-login","title":"Twitter Login","text":"config file environment default and example value description <code>twitter</code> <code>{consumerKey: ..., consumerSecret: ...}</code> An object containing the consumer key and secret obtained by the Twitter developer tools. For more details have a look at the Twitter auth guide <code>CMD_TWITTER_CONSUMERKEY</code> no default Twitter API consumer key <code>CMD_TWITTER_CONSUMERSECRET</code> no default Twitter API consumer secret"},{"location":"configuration/#upload-storage","title":"Upload Storage","text":"<p>These are only relevant when they are also configured in sync with their <code>CMD_IMAGE_UPLOAD_TYPE</code>. Also keep in mind, that <code>filesystem</code> is available, so you don't have to use either of these.</p>"},{"location":"configuration/#amazon-s3","title":"Amazon S3","text":"config file environment default and example value description <code>s3</code> <code>{ \"accessKeyId\": \"YOUR_S3_ACCESS_KEY_ID\", \"secretAccessKey\": \"YOUR_S3_ACCESS_KEY\", \"region\": \"YOUR_S3_REGION\" }</code> When <code>imageuploadtype</code> be set to <code>s3</code>, you would also need to setup this key, check our S3 Image Upload Guide <code>CMD_S3_ACCESS_KEY_ID</code> no default AWS access key id <code>CMD_S3_SECRET_ACCESS_KEY</code> no default AWS secret key <code>CMD_S3_REGION</code> no default, <code>ap-northeast-1</code> AWS S3 region <code>s3bucket</code> <code>CMD_S3_BUCKET</code> no default AWS S3 bucket name <code>CMD_S3_ENDPOINT ENV</code> no default S3 API endpoint if you don't use AWS name <code>s3folder</code> <code>CMD_S3_FOLDER</code> 'uploads' Folder where the files will be saved inside the bucket <code>s3publicFiles</code> <code>CMD_S3_PUBLIC_FILES</code> <code>false</code> If se to <code>true</code> set public permissions to files when uploading to s3 storage"},{"location":"configuration/#azure-blob-storage","title":"Azure Blob Storage","text":"config file environment default and example value description <code>CMD_AZURE_CONNECTION_STRING</code> no default Azure Blob Storage connection string <code>CMD_AZURE_CONTAINER</code> no default Azure Blob Storage container name (automatically created if non existent)"},{"location":"configuration/#imgur","title":"imgur","text":"config file environment default and example value description <code>CMD_IMGUR_CLIENTID</code> no default Imgur API client id"},{"location":"configuration/#minio","title":"Minio","text":"config file environment default and example value description <code>minio</code> <code>{ \"accessKey\": \"YOUR_MINIO_ACCESS_KEY\", \"secretKey\": \"YOUR_MINIO_SECRET_KEY\", \"endpoint\": \"YOUR_MINIO_HOST\", port: 9000, secure: true }</code> When <code>imageUploadType</code> is set to <code>minio</code>, you need to set this key. Also check out our Minio Image Upload Guide <code>CMD_MINIO_ACCESS_KEY</code> no default Minio access key <code>CMD_MINIO_SECRET_KEY</code> no default Minio secret key <code>CMD_MINIO_ENDPOINT</code> no default, <code>minio.example.org</code> Address of your Minio endpoint/instance <code>CMD_MINIO_PORT</code> no default, <code>9000</code> Port that is used for your Minio instance <code>CMD_MINIO_SECURE</code> no default, <code>true</code> If set to <code>true</code> HTTPS is used for Minio"},{"location":"configuration/#lutim","title":"Lutim","text":"config file environment default and example value description <code>lutim</code> <code>{\"url\": \"YOUR_LUTIM_URL\"}</code> When <code>imageUploadType</code> is set to <code>lutim</code>, you can setup the lutim url <code>CMD_LUTIM_URL</code> <code>https://framapic.org/</code> When <code>CMD_IMAGE_UPLOAD_TYPE</code> is set to <code>lutim</code>, you can setup the lutim url"},{"location":"faq/","title":"FAQ","text":"<p>This page collects Frequently Asked Questions of the community. If you have any questions that aren't answered here, feel free to ask us on Matrix or stop by our community forums.</p>"},{"location":"faq/#why-is-codimd-now-called-hedgedoc","title":"Why is CodiMD now called HedgeDoc?","text":"<p>The short version: There were two CodiMD-projects on GitHub, the community-driven fork and the original project maintained by the HackMD-team. To solve this naming conflict, our community-driven version was renamed to HedgeDoc. For a full writeup, check out the history overview.</p>"},{"location":"faq/#can-i-run-multiple-instances-on-the-same-database","title":"Can I run multiple instances on the same database?","text":"<p>No. The HedgeDoc server process is not entirely stateless and therefore running more than one instance will result in missing/broken content for users. In order to solve issues like HA-capabilities, please use a high level orchestrator that makes sure that always 1 instance is running on your infrastructure and that the database is available. The server process usually starts within seconds and therefore the possible downtime should be minimal.</p>"},{"location":"faq/#why-was-the-pdf-export-feature-removed","title":"Why was the PDF Export feature removed?","text":"<p>We used a headless Chromium instance to generate the PDFs, but that led to some security vulnerabilities and was therefore deactivated. There are currently plans to re-add this feature in a safe way, but this will most likely take some time and can be expected at the earliest with HedgeDoc 2.1 (but could also take longer). In the meantime you can use your browsers print to PDF Feature. This page explains how to do that for multiple browsers.</p>"},{"location":"faq/#why-cant-i-embed-some-pdfs","title":"Why can't I embed some PDFs?","text":"<p>Many servers don't allow the embedding of their content on arbitrary sites.</p> <p>For a more technical explanation: The <code>X-Frame-Options</code> header can be used to specify if a given webpage can be embedded. For security reasons this header is often set to <code>SAMEORIGIN</code>, which disallows embedding on other origins. To be able to embed a PDF inside a HedgeDoc note, the server that hosts the PDF must either send no <code>X-Frame-Options</code> header (which might be insecure) or include the URI of your HedgeDoc instance in an <code>ALLOW-FROM</code> statement. See Mozillas docs for more details. Also note that the <code>X-Frame-Options</code> header is being obsoleted by the <code>frame-ancestors</code> statement in the <code>Content-Security-Policy</code> header.</p>"},{"location":"faq/#why-cant-i-embed-a-hedgedoc-note-in-other-pages-using-iframes","title":"Why can't I embed a HedgeDoc note in other pages using iframes?","text":"<p>Allowing your HedgeDoc instance to be embedded in other pages increases the risk of clickjacking, XSS and other attacks. Therefore, we recommend to not enable this option. If you still want to allow embedding via iframe, ensure that:</p> <ul> <li>Your HedgeDoc instance is served via HTTPS</li> <li><code>cookiePolicy</code> / <code>CMD_COOKIE_POLICY</code> is set to <code>none</code> (Otherwise you will get a <code>AUTH failed: No cookie transmitted</code> error.)</li> <li><code>csp.allowFraming</code> / <code>CMD_CSP_ALLOW_FRAMING</code> is set to <code>true</code></li> </ul> <p>See also the configuration docs for more information about these options.</p>"},{"location":"faq/#i-cant-upload-images-or-the-upload-gets-stuck","title":"I can't upload images or the upload gets stuck","text":"<p>This problem is typically accompanied by the error <code>Invalid URL: /uploads/</code> in the log and is often caused by a missing <code>domain</code> / <code>CMD_DOMAIN</code> config option or an incorrect reverse proxy config. Have a look at our reverse proxy documentation and make sure that <code>protocolUseSSL</code> / <code>CMD_PROTOCOL_USESSL</code> is set to <code>true</code> if you serve HedgeDoc via HTTPS.</p>"},{"location":"faq/#hedgedoc-fails-executing-migrations-and-does-not-start","title":"HedgeDoc fails executing migrations and does not start","text":"<p>Unfortunately, older versions of HedgeDoc had some bugs regarding migrations and didn't always record that a migration was executed. Have a look at the Troubleshooting Migrations guide for more information.</p>"},{"location":"faq/#why-does-my-interface-look-weird","title":"Why does my interface look weird?","text":"<p>If your interface looks like this</p> <p></p> <p>instead of this</p> <p></p> <p>then HedgeDoc can't find the asset files like images, stylesheets, fonts, etc. You should check the following settings (or their corresponding environment variables if you e.g. use docker.):</p> <ul> <li><code>domain</code> (env: <code>CMD_DOMAIN</code>)</li> <li><code>protocolUseSSL</code> (env: <code>CMD_PROTOCOL_USESSL</code>)</li> <li><code>urlAddPort</code> (env: <code>CMD_URL_ADDPORT</code>)</li> </ul> <p>Check the reverse proxy guide for an explanation.</p>"},{"location":"dev/api/","title":"API documentation","text":"<p>Several tasks of HedgeDoc can be automated through HTTP requests. The available endpoints for this api are described in this document. For code-autogeneration there is an OpenAPIv3-compatible description available here.</p>"},{"location":"dev/api/#notes","title":"Notes","text":"<p>These endpoints create notes, return information about them or export them. You have to replace \\&lt;NOTE&gt; with either the alias or id of a note you want to work on. </p> Endpoint HTTP-Method Description <code>/new</code> <code>GET</code> Creates a new note.A random id will be assigned and the content will equal to the template (blank by default). After note creation a redirect is issued to the created note. <code>/new</code> <code>POST</code> Imports some markdown data into a new note.A random id will be assigned and the content will equal to the body of the received HTTP-request. The <code>Content-Type: text/markdown</code> header should be set on this request. <code>/new/&lt;ALIAS&gt;</code> <code>POST</code> Imports some markdown data into a new note with a given alias.This endpoint equals to the above one except that the alias from the url will be assigned to the note if FreeURL-mode is enabled. <code>/&lt;NOTE&gt;/download</code> or <code>/s/&lt;SHORT-ID&gt;/download</code> <code>GET</code> Returns the raw markdown content of a note. <code>/&lt;NOTE&gt;/publish</code> <code>GET</code> Redirects to the published version of the note. <code>/&lt;NOTE&gt;/slide</code> <code>GET</code> Redirects to the slide-presentation of the note.This is only useful on notes which are designed to be slides. <code>/&lt;NOTE&gt;/info</code> <code>GET</code> Returns metadata about the note.This includes the title and description of the note as well as the creation date and viewcount. The data is returned as a JSON object. <code>/&lt;NOTE&gt;/revision</code> <code>GET</code> Returns a list of the available note revisions.The list is returned as a JSON object with an array of revision-id and length associations. The revision-id equals to the timestamp when the revision was saved. <code>/&lt;NOTE&gt;/revision/&lt;REVISION-ID&gt;</code> <code>GET</code> Returns the revision of the note with some metadata.The revision is returned as a JSON object with the content of the note and the authorship. <code>/&lt;NOTE&gt;/gist</code> <code>GET</code> Creates a new GitHub Gist with the note's content.If GitHub integration is configured, the user will be redirected to GitHub and a new Gist with the content of the note will be created."},{"location":"dev/api/#user-history","title":"User / History","text":"<p>These endpoints return information about the current logged-in user and it's note history. If no user is logged-in, the most of this requests will fail with either a HTTP 403 or a JSON object containing <code>{\"status\":\"forbidden\"}</code>.</p> Endpoint HTTP-Method Description <code>/me</code> <code>GET</code> Returns the profile data of the current logged-in user.The data is returned as a JSON object containing the user-id, the user's name and a url to the profile picture. <code>/me/export</code> <code>GET</code> Exports a zip-archive with all notes of the current user. <code>/history</code> <code>GET</code> Returns a list of the last viewed notes.The list is returned as a JSON object with an array containing for each entry it's id, title, tags, last visit time and pinned status. <code>/history</code> <code>POST</code> Replace user's history with a new one.The body must be form-encoded and contain a field <code>history</code> with a JSON-encoded array like its returned from the server when exporting the history. <code>/history</code> <code>DELETE</code> Deletes the user's history. <code>/history/&lt;NOTE&gt;</code> <code>POST</code> Toggles the pinned status in the history for a note.The body must be form-encoded and contain a field <code>pinned</code> that is either <code>true</code> or <code>false</code>. <code>/history/&lt;NOTE&gt;</code> <code>DELETE</code> Deletes a note from the user's history."},{"location":"dev/api/#hedgedoc-server","title":"HedgeDoc-server","text":"<p>These endpoints return information about the running HedgeDoc instance.</p> Endpoint HTTP-Method Description <code>/status</code> <code>GET</code> Returns the current status of the HedgeDoc instance.The data is returned as a JSON object containing the number of notes stored on the server, (distinct) online users and more. <code>/metrics</code> <code>GET</code> Prometheus-compatible endpointExposes the same stats as <code>/status</code> in addition to various Node.js performance figures. Available since HedgeDoc 1.8"},{"location":"dev/documentation/","title":"Documentation","text":"<p>Our documentation is build with mkdocs.</p>"},{"location":"dev/documentation/#writing","title":"Writing","text":"<p>All documentation files are found in the <code>docs/content</code> directory of the hedgedoc/hedgedoc repo. These files are just normal markdown files with nothing special about them.</p> <p>The configuration for mkdocs lies in the <code>docs</code> folder in a file called <code>mkdocs.yml</code>. With that file the theme and menu - amoung others - can be configured. Please note: Any new files need to be linked to by other files or put in the navigation or the files will be very hard to find on the documentation website.</p>"},{"location":"dev/documentation/#building","title":"Building","text":"<p>To build the documentation locally you need to perform the following steps:</p> <ol> <li>Make sure you have python3 installed.</li> <li>Go into the <code>docs</code> folder.</li> <li>Install all the dependencies (E.g. with a venv) with <code>pip install -r requirements.txt</code></li> <li>Start the mkdocs dev server (<code>mkdocs serve</code>) or build the documentation (<code>mkdocs build</code>).</li> </ol>"},{"location":"dev/documentation/#deployment","title":"Deployment","text":"<p>The documentation is deployed with Messor Structor.</p> <p>The necessary Dockerfile and version menu template and also the github action to build the whole documentation can be found in the docs.hedgedoc.org repo. This repo is also used to deploy the actuall website to github.io.</p> <p>Messor Structor builds and deploys the documentation by finding all branches that follow the pattern <code>v*</code>. For each branch the docs are generated separately by first installing the dependencies from <code>requirements.txt</code> and then running mkdocs. Afterwards the menu go template is used to include a version switcher in the theme.</p>"},{"location":"dev/getting-started/","title":"Getting started","text":""},{"location":"dev/getting-started/#preparing-for-running-the-code","title":"Preparing for running the code","text":"<p>Notice: There are specialised instructions for docker if you prefer running code this way!</p> <ol> <li> <p>Clone the repository with <code>git clone https://github.com/hedgedoc/hedgedoc.git hedgedoc-server</code>    (cloning is the preferred way, but you can also download and unzip a release)</p> </li> <li> <p>Enter the directory and run <code>bin/setup</code>, which will install npm dependencies    and create configs. The setup script is written in Bash, you would need bash    as a prerequisite.</p> </li> <li> <p>Setup the config file or set up    environment variables.</p> </li> </ol>"},{"location":"dev/getting-started/#running-the-code","title":"Running the Code","text":"<p>Now that everything is in place, we can start HedgeDoc:</p> <ol> <li><code>yarn run build</code> will build the frontend bundle. It uses webpack to do that.</li> <li>Run the server with <code>node app.js</code></li> </ol>"},{"location":"dev/getting-started/#running-the-code-with-auto-reload","title":"Running the Code with Auto-Reload","text":"<p>The commands above are fine for production, but you're a developer and surely you want to change things. You would need to restart both commands whenever you change something. Luckily, you can run these commands that will automatically rebuild the frontend or restart the server if necessary.</p> <p>The commands will stay active in your terminal, so you will need multiple tabs to run both at the same time.</p> <ol> <li> <p>Use <code>yarn run dev</code> if you want webpack to continuously rebuild the frontend    code.</p> </li> <li> <p>To auto-reload the server, the easiest method is to install nodemon    and run <code>nodemon --watch app.js --watch lib --watch locales app.js</code>.</p> </li> </ol>"},{"location":"dev/getting-started/#structure","title":"Structure","text":"<p>The repository contains two parts: a server (backend) and a client (frontend). most of the server code is in <code>/lib</code> and most of the client code is in <code>public</code>.</p> <pre><code>hedgedoc-server/\n\u251c\u2500\u2500 docs/           --- documentation\n\u251c\u2500\u2500 lib/            --- server code\n\u251c\u2500\u2500 test/           --- test suite\n\u2514\u2500\u2500 public/         --- client code\n    \u251c\u2500\u2500 css/        --- css styles\n    \u251c\u2500\u2500 docs/       --- default documents\n    \u251c\u2500\u2500 js/         --- js scripts\n    \u251c\u2500\u2500 vendor/     --- vendor includes\n    \u2514\u2500\u2500 views/      --- view templates\n</code></pre>"},{"location":"dev/ot/","title":"Operational Transformation","text":"<p>From 0.3.2, we started supporting operational transformation. It makes concurrent editing safe and will not break up other users' operations. Additionally, now can show other clients' selections.</p> <p>See more at https://operational-transformation.github.io/</p> <p>And even more in this 2010 article series:</p> <ul> <li>https://drive.googleblog.com/2010/09/whats-different-about-new-google-docs_21.html</li> <li>https://drive.googleblog.com/2010/09/whats-different-about-new-google-docs_22.html</li> <li>https://drive.googleblog.com/2010/09/whats-different-about-new-google-docs.html</li> </ul>"},{"location":"dev/webpack/","title":"Webpack","text":"<p>Webpack is a JavaScript build system for frontend code. You can find out all about it on the webpack website.</p> <p>Here's how we're using it:</p>"},{"location":"dev/webpack/#webpackcommonjs","title":"<code>webpack.common.js</code>","text":"<p>This file contains all common definitions for chunks and plugins that are needed by the whole app.</p> <p>The various entrypoints under the <code>entry</code> key define groups of files (npm packages or .css/.js files directly from this project) that need to be included together to be useful. The <code>index</code> group for example bundles all javascript files and libraries used for the note editor.</p> <p>Entrypoints are referenced in the <code>plugins</code> section. The <code>HtmlWebpackPlugin</code> uses templates in <code>public/views/includes</code> to include the path to the generated resources in new templates under <code>public/views/build</code>. These templates are then used by the backend to serve HTML to the browser.</p> <p>TODO: Document which entry points are used for what.</p>"},{"location":"dev/webpack/#webpackhtmlexportjs","title":"<code>webpack.htmlexport.js</code>","text":"<p>Separate config for the \"save as html\" feature. Packs all CSS from <code>public/js/htmlExport.js</code> to <code>build/html.min.css</code>. This file is then downloaded by client-side JS and used to create the HTML. See <code>exportToHTML()</code> in <code>public/js/extra.js</code>.</p>"},{"location":"dev/webpack/#webpackdevjs","title":"<code>webpack.dev.js</code>","text":"<p>The development config uses both common configs, enables development mode and enables \"cheap\" source maps (lines only). If you need more detailed source maps while developing, you might want to use the <code>source-maps</code> option. See https://webpack.js.org/configuration/devtool/ for details.</p>"},{"location":"dev/webpack/#webpackprodjs","title":"<code>webpack.prod.js</code>","text":"<p>The production config uses both common configs and enables production mode. This automatically enables various optimizations (e.g. UglifyJS). See https://webpack.js.org/concepts/mode/ for details.</p> <p>For the global app config, the name of the emitted chunks is changed to include the content hash. See https://webpack.js.org/guides/caching/ on why this is a good idea.</p> <p>For the HTML export config, CSS minification is enabled.</p>"},{"location":"guides/migrate-etherpad/","title":"Pad migration guide from etherpad-lite","text":"<p>The goal of this migration is to do a \"dumb\" import from all the pads in Etherpad, to notes in HedgeDoc. In particular, the url locations of the pads in Etherpad will be lost. Furthermore, any metadata in Etherpad, such as revisions, author data and also formatted text will not be migrated to HedgeDoc (only the plain text contents).</p> <p>Note that this guide is not really meant as a support guide. I migrated my own Etherpad to HedgeDoc, and it turned out to be quite easy in my opinion. In this guide I share my experience. Stuff may require some creativity to work properly in your case. When I wrote this guide, I was using etherpad 1.7.0 and codimd 1.2.1. Good luck!</p>"},{"location":"guides/migrate-etherpad/#0-requirements","title":"0. Requirements","text":"<ul> <li><code>curl</code></li> <li>running Etherpad server</li> <li>running HedgeDoc server</li> <li>hedgedoc-cli</li> </ul>"},{"location":"guides/migrate-etherpad/#1-retrieve-the-list-of-pads","title":"1. Retrieve the list of pads","text":"<p>First, compose a list of all the pads that you want to have migrated from your Etherpad. Other than the admin interface, Etherpad does not have a dedicated function to dump a list of all the pads. However, the Etherpad wiki explains how to list all the pads by talking directly to the database.</p> <p>You will end up with a file containing a pad name on each line:</p> <pre><code>date-ideas\ngroceries\nlondon\nweddingchecklist\n(...)\n</code></pre>"},{"location":"guides/migrate-etherpad/#2-run-the-migration","title":"2. Run the migration","text":"<p>Download hedgedoc-cli and put the script in the same directory as the file containing the pad names. Add to this directory the file listed below, I called it <code>migrate-etherpad.sh</code>. Modify at least the configuration settings <code>ETHERPAD_SERVER</code> and <code>HEDGEDOC_SERVER</code>.</p> <pre><code>#!/bin/sh\n\n# migrate-etherpad.sh\n#\n# Description: Migrate pads from etherpad to HedgeDoc\n# Author: Daan Sprenkels &lt;hello@dsprenkels.com&gt;\n\n# This script uses the HedgeDoc command line script[1] to import a list of pads from\n# [1]: https://github.com/hedgedoc/cli/blob/master/bin/hedgedoc\n\n# The base url to where etherpad is hosted\nETHERPAD_SERVER=\"https://etherpad.example.com\"\n\n# The base url where HedgeDoc is hosted\nHEDGEDOC_SERVER=\"https://hedgedoc.example.com\"\n\n# Write a list of pads and the urls which they were migrated to\nREDIRECTS_FILE=\"redirects.txt\"\n\n\n# Fail if not called correctly\nif (( $# != 1 )); then\necho \"Usage: $0 PAD_NAMES_FILE\"\nexit 2\nfi\n\n# Do the migration\nfor PAD_NAME in $1; do\n# Download the pad\nPAD_FILE=\"$(mktemp)\"\ncurl \"$ETHERPAD_SERVER/p/$PAD_NAME/export/txt\" &gt;\"$PAD_FILE\"\n\n# Import the pad into HedgeDoc\nOUTPUT=\"$(./hedgedoc import \"$PAD_FILE\")\"\necho \"$PAD_NAME -&gt; $OUTPUT\" &gt;&gt;\"$REDIRECTS_FILE\"\ndone\n</code></pre> <p>Call this file like this:</p> <pre><code>./migrate-etherpad.sh pad_names.txt\n</code></pre> <p>This will download all the pads in <code>pad_names.txt</code> and put them on HedgeDoc. They will get assigned random ids, so you won't be able to find them. The script will save the mappings to a file though (in my case <code>redirects.txt</code>). You can use this file to redirect your users when they visit your etherpad using a <code>301 Permanent Redirect</code> status code (see the next section).</p>"},{"location":"guides/migrate-etherpad/#3-setup-redirects-optional","title":"3. Setup redirects (optional)","text":"<p>I got a <code>redirects.txt</code> file that looked a bit like this:</p> <pre><code>date-ideas -&gt; Found. Redirecting to https://hedgedoc.example.com/mPt0KfiKSBOTQ3mNcdfn\ngroceries -&gt; Found. Redirecting to https://hedgedoc.example.com/UukqgwLfhYyUUtARlcJ2_y\nlondon -&gt; Found. Redirecting to https://hedgedoc.example.com/_d3wa-BE8t4Swv5w7O2_9R\nweddingchecklist -&gt; Found. Redirecting to https://hedgedoc.example.com/XcQGqlBjl0u40wfT0N8TzQ\n(...)\n</code></pre> <p>Using some <code>sed</code> magic, I changed it to an nginx config snippet:</p> <pre><code>location = /p/date-ideas {\nreturn 301 https://hedgedoc.example.com/mPt0M1KfiKSBOTQ3mNcdfn;\n}\nlocation = /p/groceries {\nreturn 301 https://hedgedoc.example.com/UukqgwLfhYyUUtARlcJ2_y;\n}\nlocation = /p/london {\nreturn 301 https://hedgedoc.example.com/_d3wa-BE8t4Swv5w7O2_9R;\n}\nlocation = /p/weddingchecklist {\nreturn 301 https://hedgedoc.example.com/XcQGqlBjl0u40wfT0N8TzQ;\n}\n</code></pre> <p>I put this file into my <code>etherpad.example.com</code> nginx config, such that all the users would be redirected accordingly.</p>"},{"location":"guides/migration-troubleshooting/","title":"Troubleshooting Migrations","text":"<p>In some cases, HedgeDoc might apply migrations without correctly saving the progress. In these cases, HedgeDoc will refuse to start with \u201calready exists\u201d-errors like <code>ERROR: type \"enum_Notes_permission\" already exists</code>.</p> <p>To fix these issues, manual intervention in the database is required:</p> <ol> <li>Make sure you have a way to edit the database directly. For SQLite, PostgreSQL and MariaDB/MySQL, you can use the     respective command-line tools <code>sqlite3</code>, <code>psql</code> and <code>mysql</code>.</li> <li>Get the name of the failing migration and append <code>.js</code> to it.     For example, if you encounter this error     <pre><code>== 20180306150303-fix-enum: migrating =======\n\nERROR: type \"enum_Notes_permission\" already exists\n</code></pre>     the name of the failed migration would be <code>20180306150303-fix-enum.js</code>.</li> <li>Make sure HedgeDoc does not run and insert the name into the <code>SequelizeMeta</code> table.    Ensure your database shell is connected to the HedgeDoc database. The SQL-statement may look like this:     <pre><code>INSERT INTO \"SequelizeMeta\" (name) VALUES ('20180306150303-fix-enum.js');\n</code></pre></li> <li>Start HedgeDoc again and observe if it starts correctly. It may be necessary to repeat this process      and insert multiple migrations into the <code>SequelizeMeta</code> table.</li> </ol>"},{"location":"guides/minio-image-upload/","title":"Minio Guide for HedgeDoc","text":"<p>Note: This guide was written before the renaming. Just replace <code>HackMD</code> with <code>HedgeDoc</code> in your mind \ud83d\ude03 thanks!</p> <ol> <li> <p>First of all you need to setup Minio itself.</p> <p>Please refer to the official Minio docs for an  production setup.</p> <p>For checking it out and development purposes a non-persistent setup is enough:  <pre><code>docker run --name test-minio --rm -d -p 9000:9000 minio/minio server /data\n</code></pre></p> <p>Please notice this is not for productive use as all your data gets lost  when you stop this container</p> </li> <li> <p>Next step is to get the credentials form the container:</p> <pre><code>docker logs test-minio\n</code></pre> <p></p> </li> <li> <p>Open http://localhost:9000 and login with the shown credentials.</p> <p></p> </li> <li> <p>Create a bucket for HedgeDoc</p> <p></p> </li> <li> <p>Add a policy for the prefix <code>uploads</code> and make it read-only.</p> <p> Open policy editor</p> <p> Add policy for uploads</p> </li> <li> <p>Set credentials and configs for Minio in HedgeDoc's <code>config.json</code></p> <p><pre><code>\"minio\": {\n\"accessKey\": \"888MXJ7EP4XXXXXXXXX\",\n\"secretKey\": \"yQS2EbM1Y6IJrp/1BUKWq2/XXXXXXXXXXXXXXX\",\n\"endPoint\": \"localhost\",\n\"port\": 9000,\n\"secure\": false\n}\n</code></pre> You have to use different values for <code>endpoint</code> and <code>port</code> for a production  setup. Keep in mind the <code>endpoint</code>-address has to be public accessible from  your browser.</p> </li> <li> <p>Set bucket name</p> <pre><code>\"s3bucket\": \"hedgedoc\"\n</code></pre> </li> <li> <p>Set upload type.</p> <pre><code>\"imageuploadtype\": \"minio\"\n</code></pre> </li> <li> <p>Review your config.</p> <pre><code>{\n// all your other config\u2026\n\"minio\": {\n\"accessKey\": \"888MXJ7EP4XXXXXXXXX\",\n\"secretKey\": \"yQS2EbM1Y6IJrp/1BUKWq2/XXXXXXXXXXXXXXX\",\n\"endPoint\": \"localhost\",\n\"port\": 9000,\n\"secure\": false\n},\n\"s3bucket\": \"hedgedoc\",\n\"imageuploadtype\": \"minio\"\n}\n</code></pre> </li> <li> <p>If you were using filesystem before</p> </li> </ol> <p>and you want to migrate assets to minio.</p> <p>You could use a convenience script located in <code>bin/migrate_from_fs_to_minio</code>.</p> <p>Be careful, read carefully what it does, it was not tested in all environments.</p> <p>Take it as an inspiration to make your own migration script.</p>"},{"location":"guides/providing-terms/","title":"How to set up your terms of use","text":""},{"location":"guides/providing-terms/#setup-your-terms-of-use","title":"Setup your terms of use","text":"<p>To setup your terms of use, you need to provide a document called <code>terms-of-use.md</code> which contains them. Of course written in Markdown.</p> <p>It has to be provided under <code>./public/docs/</code> and will be automatically turned into a HedgeDoc document. It will also automatically updated as soon as you change the document on disk.</p> <p>As soon as the file exists a link will show up in the bottom part along with the release notes and link to them.</p>"},{"location":"guides/providing-terms/#setup-your-privacy-policy","title":"Setup your privacy policy","text":"<p>To add a privacy policy you can use the same technique as for the terms of use. The main difference is that the document is called <code>privacy.md</code>.</p> <p>See our example file <code>./public/docs/privacy.md.example</code> container some useful hints for writing your own privacy policy.</p> <p>As with the terms of use, a link to the privacy notices will show up in the area where the release notes are provided on the index page.</p>"},{"location":"guides/providing-terms/#setup-your-imprint","title":"Setup your imprint","text":"<p>To add an imprint you can use the same technique as for the terms of use. The main difference is that the document is called <code>imprint.md</code>.</p> <p>It has to be provided under <code>./public/docs/</code> and will be automatically turned into a HedgeDoc document. It will also automatically updated as soon as you change the document on disk.</p> <p>As with the terms of use, a link to the imprint will show up in the area where the release notes are provided on the index page.</p>"},{"location":"guides/reverse-proxy/","title":"Using a Reverse Proxy with HedgeDoc","text":"<p>If you want to use a reverse proxy to serve HedgeDoc, here are the essential configs that you'll have to do.</p> <p>This documentation will cover HTTPS setup, with comments for HTTP setup.</p>"},{"location":"guides/reverse-proxy/#cloudflare","title":"Cloudflare","text":"<p>Warning</p> <p>If you use Cloudflare as reverse proxy then you MUST disable the minify features for HTML, CSS and JS, or your HedgeDoc instance may be broken. For more information please read the Cloudflare documentation.</p>"},{"location":"guides/reverse-proxy/#hedgedoc-config","title":"HedgeDoc config","text":""},{"location":"guides/reverse-proxy/#useful-configuration-options","title":"Useful configuration options","text":"<code>config.json</code> parameter Environment variable Value Example <code>domain</code> <code>CMD_DOMAIN</code> The full domain where your instance will be available <code>hedgedoc.example.com</code> <code>host</code> <code>CMD_HOST</code> An ip or domain name that is only available to HedgeDoc and your reverse proxy <code>localhost</code> <code>port</code> <code>CMD_PORT</code> An available port number on that IP <code>3000</code> <code>path</code> <code>CMD_PATH</code> path to UNIX domain socket to listen on (if specified, <code>host</code> or <code>CMD_HOST</code> and <code>port</code> or <code>CMD_PORT</code> are ignored) <code>/var/run/hedgedoc.sock</code> <code>protocolUseSSL</code> <code>CMD_PROTOCOL_USESSL</code> <code>true</code> if you want to serve your instance over SSL (HTTPS), <code>false</code> if you want to use plain HTTP <code>true</code> <code>useSSL</code> <code>false</code>, the communications between HedgeDoc and the proxy are unencrypted <code>false</code> <code>urlAddPort</code> <code>CMD_URL_ADDPORT</code> <code>false</code>, HedgeDoc should not append its port to the URLs it links <code>false</code> <code>hsts.enable</code> <code>CMD_HSTS_ENABLE</code> <code>true</code> if you host over SSL, <code>false</code> otherwise <code>true</code> <p>Full explanation of the configuration options</p>"},{"location":"guides/reverse-proxy/#configure-asset-link-generation","title":"Configure asset link generation","text":"<p>HedgeDoc generates links to other pages and to assets (like images, stylesheets, fonts, etc) using the following settings. You must configure them according to the URL that you use to access your instance.</p> <ul> <li><code>domain</code> (env: <code>CMD_DOMAIN</code>)</li> <li><code>protocolUseSSL</code> (env: <code>CMD_PROTOCOL_USESSL</code>)</li> <li><code>urlAddPort</code> (env: <code>CMD_URL_ADDPORT</code>)</li> </ul> <p>Example</p> <p>You access your HedgeDoc instance using a reverse proxy via <code>https://markdown.example</code>. You must set:</p> <ul> <li><code>domain</code> to <code>markdown.example</code>.</li> <li><code>protocolUseSSL</code> to <code>true</code> because you access your instance via HTTPS.</li> <li><code>urlAddPort</code> to <code>false</code> because you access the instance using the default HTTPS port.</li> </ul>"},{"location":"guides/reverse-proxy/#reverse-proxy-config","title":"Reverse Proxy config","text":""},{"location":"guides/reverse-proxy/#generic","title":"Generic","text":"<p>The reverse proxy must allow websocket <code>Upgrade</code> requests at path <code>/sockets.io/</code>.</p> <p>It must pass through the scheme used by the client (http or https).</p>"},{"location":"guides/reverse-proxy/#nginx","title":"Nginx","text":"<p>Here is an example configuration for Nginx.</p> <pre><code>map $http_upgrade $connection_upgrade {\n        default upgrade;\n        ''      close;\n}\nserver {\n        server_name hedgedoc.example.com;\n\n        location / {\n                proxy_pass http://127.0.0.1:3000;\n                proxy_set_header Host $host; \n                proxy_set_header X-Real-IP $remote_addr; \n                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; \n                proxy_set_header X-Forwarded-Proto $scheme;\n        }\n\n        location /socket.io/ {\n                proxy_pass http://127.0.0.1:3000;\n                proxy_set_header Host $host; \n                proxy_set_header X-Real-IP $remote_addr; \n                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; \n                proxy_set_header X-Forwarded-Proto $scheme;\n                proxy_set_header Upgrade $http_upgrade;\n                proxy_set_header Connection $connection_upgrade;\n        }\n\n    listen [::]:443 ssl http2;\n    listen 443 ssl http2;\n    ssl_certificate fullchain.pem;\n    ssl_certificate_key privkey.pem;\n    include options-ssl-nginx.conf;\n    ssl_dhparam ssl-dhparams.pem;\n}\n</code></pre>"},{"location":"guides/reverse-proxy/#apache","title":"Apache","text":"<p>You will need these modules enabled: <code>proxy</code>, <code>proxy_http</code> and <code>proxy_wstunnel</code>. Here is an example config snippet: <pre><code>&lt;VirtualHost *:443&gt;\n  ServerName hedgedoc.example.com\n\n  RewriteEngine on\n  RewriteCond %{REQUEST_URI} ^/socket.io             [NC]\n  RewriteCond %{HTTP:Upgrade} =websocket             [NC]\n  RewriteRule /(.*)  ws://127.0.0.1:3000/$1          [P,L]\n\n  ProxyPass / http://127.0.0.1:3000/\n  ProxyPassReverse / http://127.0.0.1:3000/\n\n  RequestHeader set \"X-Forwarded-Proto\" expr=%{REQUEST_SCHEME}\n\n  ErrorLog ${APACHE_LOG_DIR}/error.log\n  CustomLog ${APACHE_LOG_DIR}/access.log combined\n\n  SSLCertificateFile /etc/letsencrypt/live/hedgedoc.example.com/fullchain.pem\n  SSLCertificateKeyFile /etc/letsencrypt/live/hedgedoc.example.com/privkey.pem\n  Include /etc/letsencrypt/options-ssl-apache.conf\n&lt;/VirtualHost&gt;\n</code></pre></p>"},{"location":"guides/s3-image-upload/","title":"Guide - Setup HedgeDoc S3 image upload","text":"<p>Note: This guide was written before the renaming. Just replace <code>HackMD</code> with <code>HedgeDoc</code> in your mind \ud83d\ude03 thanks!</p> <ol> <li> <p>Go to AWS S3 console and create a new bucket.    </p> </li> <li> <p>Click on bucket, select Properties  on the side panel, and find Permission section. Click Edit bucket policy.    </p> </li> <li> <p>Enter the following policy, replace <code>bucket_name</code> with your bucket name:    </p> <pre><code>{\n\"Version\": \"2012-10-17\",\n\"Statement\": [\n{\n\"Effect\": \"Allow\",\n\"Principal\": \"*\",\n\"Action\": \"s3:GetObject\",\n\"Resource\": \"arn:aws:s3:::bucket_name/uploads/*\"\n}\n]\n}\n</code></pre> </li> <li> <p>Go to IAM console and create a new IAM user. Remember your user credentials(<code>key</code>/<code>access token</code>)</p> </li> <li> <p>Enter user page, select Permission tab, look at Inline Policies section, and click Create User Policy </p> </li> <li> <p>Select Custom Policy </p> </li> <li> <p>Enter the following policy, replace <code>bucket_name</code> with your bucket name:    </p> <pre><code>{\n\"Version\": \"2012-10-17\",\n\"Statement\": [\n{\n\"Effect\": \"Allow\",\n\"Action\": [\n\"s3:*\"\n],\n\"Resource\": [\n\"arn:aws:s3:::bucket_name/uploads/*\"\n]\n}\n]\n}\n</code></pre> </li> <li> <p>Edit <code>config.json</code> and set following keys:</p> <pre><code>{\n\"production\": {\n...\n\"imageuploadtype\": \"s3\",\n\"s3\": {\n\"accessKeyId\": \"YOUR_S3_ACCESS_KEY_ID\",\n\"secretAccessKey\": \"YOUR_S3_ACCESS_KEY\",\n\"region\": \"YOUR_S3_REGION\" // example: ap-northeast-1\n},\n\"s3bucket\": \"YOUR_S3_BUCKET_NAME\"\n}\n}\n</code></pre> </li> <li> <p>In additional to edit <code>config.json</code> directly, you could also try environment variables.</p> </li> </ol>"},{"location":"guides/s3-image-upload/#related-tools","title":"Related Tools","text":"<ul> <li>AWS Policy Generator</li> </ul>"},{"location":"guides/auth/authelia/","title":"OAuth with Authelia SSO (self-hosted)","text":""},{"location":"guides/auth/authelia/#prerequisites","title":"Prerequisites","text":"<p>This guide assumes you have run and configured Authelia. If you want to get Authelia running quickly, there are example docker-compose files in the Authelia Github repository. Also this guides assumes you run HedgeDoc via a Docker container. Find out how the mentioned config environment variables are mapped to entries in the config file at our configuration page.</p>"},{"location":"guides/auth/authelia/#steps","title":"Steps","text":"<ol> <li>Set up the necessary OpenID Connect parameters in your Authelia <code>configuration.yml</code> as explained in the documentation at https://www.authelia.com/docs/configuration/identity-providers/oidc.html.</li> <li>Make sure to generate safe secrets (such as <code>LENGTH=64; tr -cd '[:alnum:]' &lt; /dev/urandom | fold -w \"${LENGTH}\" | head -n 1 | tr -d '\\n' ; echo</code>)</li> <li>A completed <code>identity_providers</code> section of the configuration may look like the following (the chosen Client ID <code>id</code> shouldn't actually be this guessable for safety reasons):</li> </ol> <pre><code>identity_providers:\noidc:\nhmac_secret: &lt;hmac secret here&gt; # use docker secrets for this\nissuer_private_key: &lt;issuer private key secret here&gt; # use docker secrets for this\naccess_token_lifespan: 1h\nauthorize_code_lifespan: 1m\nid_token_lifespan: 1h\nrefresh_token_lifespan: 90m\nenable_client_debug_messages: false\nclients:\n- id: HedgeDoc # this should be changed to something more secure\ndescription: HedgeDoc SSO\nsecret: &lt;client secret here&gt;\npublic: false\nauthorization_policy: two_factor\naudience: []\nscopes:\n- openid\n- email\n- profile\nredirect_uris:\n- https://&lt;your-hedgedoc-url&gt;/auth/oauth2/callback\ngrant_types:\n- refresh_token\n- authorization_code\nresponse_types:\n- code\nresponse_modes:\n- form_post\n- query\n- fragment\nuserinfo_signing_algorithm: none\n</code></pre> <ol> <li>Restart Authelia to apply to new configuration and check for any errors in the log</li> <li>In the <code>docker-compose.yml</code> of HedgeDoc add the following environment variables (you can choose different attributes for e.g. the display name - all available attributes you can find in the scope definitions):</li> </ol> <pre><code>- CMD_URL_ADDPORT=false\n- CMD_PROTOCOL_USESSL=true\n- CMD_OAUTH2_PROVIDERNAME=Authelia\n- CMD_OAUTH2_CLIENT_ID=HedgeDoc\n- CMD_OAUTH2_CLIENT_SECRET=&lt;client secret here&gt;\n- CMD_OAUTH2_SCOPE=openid email profile\n- CMD_OAUTH2_USER_PROFILE_USERNAME_ATTR=sub\n- CMD_OAUTH2_USER_PROFILE_DISPLAY_NAME_ATTR=name\n- CMD_OAUTH2_USER_PROFILE_EMAIL_ATTR=email\n- CMD_OAUTH2_USER_PROFILE_URL=https://&lt;your-authelia-url&gt;/api/oidc/userinfo\n- CMD_OAUTH2_TOKEN_URL=https://&lt;your-authelia-url&gt;/api/oidc/token\n- CMD_OAUTH2_AUTHORIZATION_URL=https://&lt;your-authelia-url&gt;/api/oidc/authorize\n</code></pre> <ol> <li>Run <code>docker-compose up -d</code> on HedgeDoc to apply your settings.</li> <li>Sign in to your HedgeDoc using your Authelia login</li> </ol>"},{"location":"guides/auth/azure-ad/","title":"Authentication Guide: Azure Active Directory","text":"<ol> <li> <p>Login or Sign-up on portal.azure.com  </p> </li> <li> <p>Navigate to Azure Active Directory from the homepage or the sidebar. </p> </li> <li> <p>Navigate to App Registration </p> </li> <li> <p>Enter Name \"HedgeDoc\". Then click on Register </p> </li> <li> <p>In the next page, click on <code>Add a certificate or secret</code> then navigate to <code>Client Secrets</code>.    Create a new client secret, add a description of your choice and copy the secret value. </p> </li> <li> <p>Navigate to authentication page, then add a new platform. Select web as the platform. </p> </li> <li> <p>Set the <code>Redirect URI</code> to <code>https://YOURHOSTNAME/auth/oauth2/callback</code>. Check <code>ID Tokens</code> and uncheck <code>Access Token</code>. </p> </li> <li> <p>Retrieve the APPLICATION-ID and DIRECTORY-ID from the \"Overview\" section. </p> </li> <li> <p>Pass in your credentials as environment variables down below.  </p> </li> </ol> <pre><code>CMD_OAUTH2_USER_PROFILE_URL=https://your.azureprofileurl.com/auth/oauth2/callback\nCMD_OAUTH2_USER_PROFILE_USERNAME_ATTR=yourPrincipalName\nCMD_OAUTH2_USER_PROFILE_DISPLAY_NAME_ATTR=displayName\nCMD_OAUTH2_USER_PROFILE_EMAIL_ATTR=email\nCMD_OAUTH2_USER_PROFILE_ID_ATTR=id\nCMD_OAUTH2_TOKEN_URL=https://login.microsoftonline.com/**DIRECTORY-ID**/oauth2/v2.0/token\nCMD_OAUTH2_AUTHORIZATION_URL=https://login.microsoftonline.com/**DIRECTORY-ID**/oauth2/v2.0/authorize\nCMD_OAUTH2_CLIENT_ID=APPLICATION-ID\nCMD_OAUTH2_CLIENT_SECRET=CLIENT-SECRET\nCMD_OAUTH2_PROVIDERNAME=AzureAD\nCMD_OAUTH2_SCOPE=openid_offline_access\n</code></pre>"},{"location":"guides/auth/github/","title":"Authentication guide - GitHub","text":"<ol> <li> <p>Sign-in or sign-up for a GitHub account</p> </li> <li> <p>Navigate to developer settings in your GitHub account here and select the \"OAuth Apps\" tab</p> </li> <li> <p>Click on the New OAuth App button, to create a new OAuth App: </p> </li> <li> <p>Fill out the new OAuth application registration form, and click Register Application </p> <p>Note: The callback URL is /auth/github/callback <li> <p>After successfully registering the application, you'll receive the Client ID and Client Secret for the application </p> </li> <li> <p>Add the Client ID and Client Secret to your config.json file or pass them as environment variables</p> <ul> <li><code>config.json</code>:   <pre><code>{\n\"production\": {\n\"github\": {\n\"clientID\": \"3747d30eaccXXXXXXXXX\",\n\"clientSecret\": \"2a8e682948eee0c580XXXXXXXXXXXXXXXXXXXXXX\"\n}\n}\n}\n</code></pre></li> </ul> <ul> <li>environment variables:   <pre><code>CMD_GITHUB_CLIENTID=3747d30eaccXXXXXXXXX\nCMD_GITHUB_CLIENTSECRET=2a8e682948eee0c580XXXXXXXXXXXXXXXXXXXXXX\n</code></pre></li> </ul> </li>"},{"location":"guides/auth/gitlab-self-hosted/","title":"GitLab (self-hosted)","text":"<p>Note: This guide was written before the renaming. Just replace <code>HackMD</code> with <code>HedgeDoc</code> in your mind \ud83d\ude03 thanks!</p> <ol> <li>Sign in to your GitLab</li> <li>Navigate to the application management page at <code>https://your.gitlab.domain/admin/applications</code> (admin permissions required)</li> <li> <p>Click New application to create a new application and fill out the registration form:</p> <p></p> </li> <li> <p>Click Submit</p> </li> <li> <p>In the list of applications select HackMD. Leave that site open to copy the application ID and secret in the next    step.</p> <p></p> </li> <li> <p>In the <code>docker-compose.yml</code> add the following environment variables to <code>app:</code> <code>environment:</code></p> <pre><code>- CMD_DOMAIN=your.hedgedoc.domain\n- CMD_URL_ADDPORT=true\n- CMD_PROTOCOL_USESSL=true\n- CMD_GITLAB_BASEURL=https://your.gitlab.domain\n- CMD_GITLAB_CLIENTID=23462a34example99XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n- CMD_GITLAB_CLIENTSECRET=5532e9dexamplXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n</code></pre> </li> <li> <p>Run <code>docker-compose up -d</code> to apply your settings.</p> </li> <li> <p>Sign in to your HedgeDoc using your GitLab ID:</p> <p></p> </li> </ol>"},{"location":"guides/auth/keycloak/","title":"OAuth with Keycloak/Red Hat SSO (self-hosted)","text":""},{"location":"guides/auth/keycloak/#prerequisites","title":"Prerequisites","text":"<p>This guide assumes you have run and configured Keycloak. If you'd like to meet this prerequisite quickly, it can be achieved by running a <code>jboss/keycloak</code> container and attaching it to your network. Set the environment variables KEYCLOAK_USER and <code>KEYCLOAK_PASSWORD</code>, and expose port 8080.</p> <p>Where HTTPS is specified throughout, use HTTP instead. You may also have to specify the exposed port, 8080.</p>"},{"location":"guides/auth/keycloak/#steps","title":"Steps","text":"<ol> <li>Sign in to the administration portal for your Keycloak instance at https://keycloak.example.com/auth/admin/master/console</li> </ol> <p>You may note that a separate realm is specified throughout this tutorial. It is best practice not to use the master realm, as it normally contains the realm-management client that federates access using the policies and permissions you can create.</p> <ol> <li>Navigate to the client management page at <code>https://keycloak.example.com/auth/admin/master/console/#/realms/your-realm/clients</code> (admin permissions required)</li> <li>Click Create to create a new client and fill out the registration form. You should set the Root URL to the fully qualified public URL of your HedgeDoc instance.</li> <li>Click Save</li> <li>Set the Access Type of the client to <code>confidential</code>. This will make your client require a client secret upon authentication.</li> </ol>"},{"location":"guides/auth/keycloak/#additional-steps-to-circumvent-generic-oauth2-issue","title":"Additional steps to circumvent generic OAuth2 issue","text":"<ol> <li>Select Client Scopes from the sidebar, and begin to create a new client scope using the Create button.</li> <li>Ensure that the Name field is set to <code>id</code>.</li> <li>Create a new mapper under the Mappers tab. This should reference the User Property <code>id</code>. <code>Claim JSON Type</code> should be String and all switches below should be enabled. Save the mapper.</li> <li>Go to the client you set up in the previous steps using the Clients page, then choose the Client Scopes tab. Apply the scope you've created. This should mitigate errors as seen in hedgedoc/hedgedoc#56, as the <code>/userinfo</code> endpoint should now bring back the user's ID under the <code>id</code> key as well as <code>sub</code>.</li> </ol> <ol> <li>In the <code>docker-compose.yml</code> add the following environment variables to <code>app:</code> <code>environment:</code></li> </ol> <pre><code>CMD_OAUTH2_USER_PROFILE_URL=https://keycloak.example.com/auth/realms/your-realm/protocol/openid-connect/userinfo\nCMD_OAUTH2_USER_PROFILE_USERNAME_ATTR=preferred_username\nCMD_OAUTH2_USER_PROFILE_DISPLAY_NAME_ATTR=name\nCMD_OAUTH2_USER_PROFILE_EMAIL_ATTR=email\nCMD_OAUTH2_TOKEN_URL=https://keycloak.example.com/auth/realms/your-realm/protocol/openid-connect/token\nCMD_OAUTH2_AUTHORIZATION_URL=https://keycloak.example.com/auth/realms/your-realm/protocol/openid-connect/auth\nCMD_OAUTH2_CLIENT_ID=&lt;your client ID&gt;\nCMD_OAUTH2_CLIENT_SECRET=&lt;your client secret, which you can find under the Credentials tab for your client&gt;\nCMD_OAUTH2_PROVIDERNAME=Keycloak\nCMD_OAUTH2_SCOPE=openid email profile\nCMD_DOMAIN=&lt;hedgedoc.example.com&gt;\nCMD_PROTOCOL_USESSL=true CMD_URL_ADDPORT=false\n</code></pre> <ol> <li>Run <code>docker-compose up -d</code> to apply your settings.</li> <li>Sign in to your HedgeDoc using your Keycloak ID</li> </ol>"},{"location":"guides/auth/ldap-ad/","title":"AD LDAP auth","text":"<p>To setup your HedgeDoc instance with Active Directory you need the following configs:</p> <pre><code>CMD_LDAP_URL=ldap://internal.example.com\nCMD_LDAP_BINDDN=cn=binduser,cn=Users,dc=internal,dc=example,dc=com\nCMD_LDAP_BINDCREDENTIALS=\"&lt;super secret password&gt;\"\nCMD_LDAP_SEARCHBASE=dc=internal,dc=example,dc=com\nCMD_LDAP_SEARCHFILTER=(&amp;(objectcategory=person)(objectclass=user)(|(sAMAccountName={{username}})(mail={{username}})))\nCMD_LDAP_USERIDFIELD=sAMAccountName\nCMD_LDAP_PROVIDERNAME=\"Example Inc AD\"\n</code></pre> <p><code>CMD_LDAP_BINDDN</code> is either the <code>distinguishedName</code> or the <code>userPrincipalName</code>. This can cause \"username/password is invalid\" when either this value or the password from <code>CMD_LDAP_BINDCREDENTIALS</code> are incorrect.</p> <p><code>CMD_LDAP_SEARCHFILTER</code> matches on all users and uses either the email address or the <code>sAMAccountName</code> (usually the login name you also use to login to Windows).</p> <p>Only using <code>sAMAccountName</code> looks like this: <code>(&amp;(objectcategory=person)(objectclass=user)(sAMAccountName={{username}}))</code></p> <p><code>CMD_LDAP_USERIDFIELD</code> says we want to use <code>sAMAccountName</code> as unique identifier for the account itself.</p> <p><code>CMD_LDAP_PROVIDERNAME</code> just the name written above the username and password field on the login page.</p> <p>Same in json:</p> <pre><code>\"ldap\": {\n\"url\": \"ldap://internal.example.com\",\n\"bindDn\": \"cn=binduser,cn=Users,dc=internal,dc=example,dc=com\",\n\"bindCredentials\": \"&lt;super secret password&gt;\",\n\"searchBase\": \"dc=internal,dc=example,dc=com\",\n\"searchFilter\": \"(&amp;(objectcategory=person)(objectclass=user)(|(sAMAccountName={{username}})(mail={{username}})))\",\n\"useridField\": \"sAMAccountName\",\n},\n</code></pre> <p>More details and example: https://www.npmjs.com/package/passport-ldapauth</p>"},{"location":"guides/auth/mattermost-self-hosted/","title":"Authentication guide - Mattermost (self-hosted)","text":"<p>Note: The Mattermost setup portion of this document is just a quick guide. See the official documentation for more details.</p> <p>This guide uses the generic OAuth2 module for compatibility with Mattermost version 5.0 and above.</p> <ol> <li> <p>Sign-in with an administrator account to your Mattermost instance</p> </li> <li> <p>Make sure OAuth 2.0 Service Provider is enabled in the Main Menu (menu button next to your username in the top left corner) --&gt; System Console --&gt; Custom Integrations menu, which you can find at <code>https://your.mattermost.domain/admin_console/integrations/custom</code> </p> </li> <li> <p>Navigate to the OAuth integration settings through Main Menu --&gt; Integrations --&gt; OAuth 2.0 Applications, at <code>https://your.mattermost.domain/yourteam/integrations/oauth2-apps</code></p> </li> <li> <p>Click on the Add OAuth 2.0 Application button to add a new OAuth application </p> </li> <li> <p>Fill out the form and click Save </p> </li> </ol> <p>Note: The callback URL is \\&lt;your-hedgedoc-url&gt;/auth/oauth2/callback</p> <ol> <li> <p>After saving the application, you'll receive the Client ID and Client Secret </p> </li> <li> <p>Add the Client ID and Client Secret to your config.json file or pass them as environment variables</p> <ul> <li> <p><code>config.json</code>:   <pre><code>{\n\"production\": {\n\"oauth2\": {\n\"baseURL\": \"https://your.mattermost.domain\",\n\"userProfileURL\": \"https://your.mattermost.domain/api/v4/users/me\",\n\"userProfileUsernameAttr\": \"id\",\n\"userProfileDisplayNameAttr\": \"username\",\n\"userProfileEmailAttr\": \"email\",\n\"tokenURL\": \"https://your.mattermost.domain/oauth/access_token\",\n\"authorizationURL\": \"https://your.mattermost.domain/oauth/authorize\",\n\"clientID\": \"ii4p1u3jz7dXXXXXXXXXXXXXXX\",\n\"clientSecret\": \"mqzzx6fydbXXXXXXXXXXXXXXXX\"\n}\n}\n}\n</code></pre></p> <ul> <li>environment variables:   <pre><code>CMD_OAUTH2_BASEURL=https://your.mattermost.domain\nCMD_OAUTH2_USER_PROFILE_URL=https://your.mattermost.domain/api/v4/users/me\nCMD_OAUTH2_USER_PROFILE_USERNAME_ATTR=id\nCMD_OAUTH2_USER_PROFILE_DISPLAY_NAME_ATTR=username\nCMD_OAUTH2_USER_PROFILE_EMAIL_ATTR=email\nCMD_OAUTH2_TOKEN_URL=https://your.mattermost.domain/oauth/access_token\nCMD_OAUTH2_AUTHORIZATION_URL=https://your.mattermost.domain/oauth/authorize\nCMD_OAUTH2_CLIENT_ID=ii4p1u3jz7dXXXXXXXXXXXXXXX\nCMD_OAUTH2_CLIENT_SECRET=mqzzx6fydbXXXXXXXXXXXXXXXX\n</code></pre></li> </ul> </li> </ul> </li> </ol>"},{"location":"guides/auth/nextcloud/","title":"Authentication guide - Nextcloud (self-hosted)","text":"<p>This has been constructed using the Nextcloud OAuth2 Documentation combined with this issue comment on the nextcloud bugtracker .</p> <p>This guide uses the generic OAuth2 module for compatibility with Nextcloud 13 and above (this guide has been tested successfully with Nextcloud 14 and Nextcloud 20).</p> <ol> <li> <p>Sign-in with an administrator account to your Nextcloud server</p> </li> <li> <p>Navigate to the OAuth integration settings: Profile Icon (top right) --&gt; Settings    Then choose Security Settings from the Administration part of the list - Don't confuse this with Personal Security Settings, where you would change your personal password!    At the top there's OAuth 2.0-Clients. </p> </li> <li> <p>Add your HedgeDoc instance by giving it a name (perhaps HedgeDoc, but could be anything) and a Redirection-URI. The Redirection-URI will be <code>\\&lt;your-hedgedoc-url\\&gt;/auth/oauth2/callback</code>. Click Add. </p> </li> <li> <p>You'll now see a line containing a client identifier and a Secret.    </p> </li> <li> <p>That's it for Nextcloud, the rest is configured in your HedgeDoc <code>config.json</code> or via the <code>CMD_</code> environment    variables!</p> </li> <li> <p>Add the Client ID and Client Secret to your <code>config.json</code> file or pass them as environment variables. Make sure you    also replace <code>&lt;your-nextcloud-domain&gt;</code> with the right domain name.</p> <ul> <li> <p><code>config.json</code>:</p> <pre><code>{\n\"production\": {\n\"oauth2\": {\n\"clientID\": \"ii4p1u3jz7dXXXXXXXXXXXXXXX\",\n\"clientSecret\": \"mqzzx6fydbXXXXXXXXXXXXXXXX\",\n\"authorizationURL\": \"https://&lt;your-nextcloud-domain&gt;/apps/oauth2/authorize\",\n\"tokenURL\": \"https://&lt;your-nextcloud-domain&gt;/apps/oauth2/api/v1/token\",\n\"userProfileURL\": \"https://&lt;your-nextcloud-domain&gt;/ocs/v2.php/cloud/user?format=json\",\n\"userProfileUsernameAttr\": \"ocs.data.id\",\n\"userProfileDisplayNameAttr\": \"ocs.data.display-name\",\n\"userProfileEmailAttr\": \"ocs.data.email\"\n}\n}\n}\n</code></pre> </li> </ul> <ul> <li> <p>environment variables:</p> <pre><code>CMD_OAUTH2_CLIENT_ID=ii4p1u3jz7dXXXXXXXXXXXXXXX\nCMD_OAUTH2_CLIENT_SECRET=mqzzx6fydbXXXXXXXXXXXXXXXX\nCMD_OAUTH2_AUTHORIZATION_URL=https://&lt;your-nextcloud-domain&gt;/apps/oauth2/authorize\nCMD_OAUTH2_TOKEN_URL=https://&lt;your-nextcloud-domain&gt;/apps/oauth2/api/v1/token\nCMD_OAUTH2_USER_PROFILE_URL=https://&lt;your-nextcloud-domain&gt;/ocs/v2.php/cloud/user?format=json\nCMD_OAUTH2_USER_PROFILE_USERNAME_ATTR=ocs.data.id\nCMD_OAUTH2_USER_PROFILE_DISPLAY_NAME_ATTR=ocs.data.display-name\nCMD_OAUTH2_USER_PROFILE_EMAIL_ATTR=ocs.data.email\n</code></pre> </li> </ul> </li> </ol> <p>Info</p> <p>If you are using a CA not trusted by Node.js (like Let's Encrypt e.g) for your NextCloud instance you can set the <code>NODE_EXTRA_CA_CERTS</code> environment variable to the CA certificate file path of your CA. Remember to also make the file available inside the Docker container, if you're running HedgeDoc in Docker container.</p>"},{"location":"guides/auth/oauth/","title":"OAuth general information","text":"service callback URL (after the server URL) facebook <code>/auth/facebook/callback</code> twitter <code>/auth/twitter/callback</code> github <code>/auth/github/callback</code> gitlab <code>/auth/gitlab/callback</code> mattermost <code>/auth/mattermost/callback</code> dropbox <code>/auth/dropbox/callback</code> google <code>/auth/google/callback</code> saml <code>/auth/saml/callback</code>"},{"location":"guides/auth/saml-keycloak/","title":"How to setup HedgeDoc SAML with Keycloak","text":""},{"location":"guides/auth/saml-keycloak/#configuring-keycloak","title":"Configuring Keycloak","text":""},{"location":"guides/auth/saml-keycloak/#get-the-public-certificate","title":"Get the public certificate","text":"<ol> <li>Select the Realm you want to use for your HedgeDoc SAML</li> <li>Select \"Realm Settings\" in left sidebar</li> <li>Select the \"Keys\" tab</li> <li>Click the button \"Certificate\" at <code>RS256</code> algorithm </li> <li>Copy this key and save it to the file specified in <code>saml.idpCert</code> property of the HedgeDoc configuration or <code>CMD_SAML_IDPCERT</code> environment variable</li> </ol>"},{"location":"guides/auth/saml-keycloak/#create-a-new-client","title":"Create a new client","text":"<ol> <li>Select \"Client\" in left sidebar </li> <li>Click on the \"Create\" button</li> <li>Set a Client ID and specify this in <code>saml.issuer</code> property of the HedgeDoc configuration or <code>CMD_SAML_ISSUER</code> environment variable</li> <li>Select <code>SAML</code> as Client Protocol</li> <li>Set Client SAML Endpoint to <code>https://hedgedoc.example.com/auth/saml</code> (replace <code>https://hedgedoc.example.com</code> with the base URL of your HedgeDoc installation) </li> <li>Leave \"Client Signature Required\" enabled</li> <li>Set Root URL to <code>https://hedgedoc.example.com</code> (replace it here also with the base URL of your HedgeDoc installation)</li> <li>Set Valid Redirect URIs to <code>https://hedgedoc.example.com/auth/saml/callback</code> (you should also define all other domains of your HedgeDoc installtion with the suffix <code>/auth/saml/callback</code>)</li> <li>Set Base URL to <code>/</code> </li> <li>(optional) You can set which Name ID Format should be used</li> </ol>"},{"location":"guides/auth/saml-keycloak/#configure-hedgedoc","title":"Configure HedgeDoc","text":""},{"location":"guides/auth/saml-keycloak/#config-file","title":"Config file","text":"<p>You have to put the following block inside your <code>config.json</code>: <pre><code>\"saml\": {\n\"issuer\": \"hedgedoc\", // Change to the \"Client ID\" specified in the Keycloak Client\n\"identifierFormat\": \"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\",\n\"idpSsoUrl\": \"https://keycloak.example.org/auth/realms/test/protocol/saml\", // replace keycloak.example.org with the url of your keycloak server\n\"idpCert\": \"/path/to/the/cert.pem\",\n\"clientCert\": \"/path/to/the/key.pem\" // this one is optional, see below\n}\n</code></pre></p>"},{"location":"guides/auth/saml-keycloak/#environment-variables","title":"Environment Variables","text":"<ul> <li><code>CMD_SAML_IDPSSOURL</code>: <code>https://keycloak.example.org/auth/realms/test/protocol/saml</code> (replace keycloak.example.org with the url of your keycloak server)</li> <li><code>CMD_SAML_IDPCERT</code>: <code>/path/to/the/cert.pem</code></li> <li>(optional, see below) <code>CMD_SAML_CLIENTCERT</code>: <code>/path/to/the/key.pem</code></li> <li><code>CMD_SAML_ISSUER</code>: <code>hedgedoc</code> (Change to the \"Client ID\" specified in the Keycloak Client)</li> <li><code>CMD_SAML_IDENTIFIERFORMAT</code>: <code>urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified</code></li> </ul>"},{"location":"guides/auth/saml-keycloak/#client-certificate-optional","title":"Client certificate (optional)","text":"<p>If you want keycloak to be able to verify HedgeDoc, you hava to create a client certificate. There are two options for this:</p>"},{"location":"guides/auth/saml-keycloak/#create-private-keys-for-signing","title":"Create Private Keys for Signing","text":"<ol> <li> <p>Generate the private key and certificate with the following commands: <pre><code>openssl genrsa -out priv.pem 2048\nopenssl req -new -x509 -key priv.pem -out cert.pem\n</code></pre> execute the following steps in keycloak</p> </li> <li> <p>Select \"Client\" in left sidebar</p> </li> <li>Go to your HedgeDoc-Client</li> <li>Select the \"SAML Keys\" tab </li> <li>Click on \"Import\"</li> <li>Select <code>Certificate PEM</code> as \"Archive Format\"</li> <li>Now upload the generated cert.pem (in this case named <code>cert.pem</code>) </li> <li>Click on \"Import\"</li> <li>Move or copy this key (in this case named <code>key.pem</code>) and save it to the file specified in <code>saml.clientCert</code> property of the HedgeDoc configuration or in the enviroment-variable <code>CMD_SAML_CLIENTCERT</code></li> </ol>"},{"location":"guides/auth/saml-keycloak/#convert-private-certificate-generated-by-keycloak","title":"Convert Private Certificate generated by KeyCloak","text":"<p>Instead if generating you own certificate, you can also use the one generated by keycloak.</p> <ol> <li>Select \"Client\" in left sidebar</li> <li>Go to your HedgeDoc-Client</li> <li> <p>Select the \"SAML Keys\" tab </p> </li> <li> <p>Now click on \"Export\"</p> </li> <li>Here you can select the output format, choose <code>PKCS12</code>. You also have to set a password. Choose your own. </li> <li>Click on \"Download\" and save the file somewhere on you computer</li> <li>You now have to extract the private Key. You can do this with the following command. WHen asked, enter your password. <pre><code>openssl pkcs12 -in keystore.p12 -out key.pem -nocerts -nodes\n</code></pre></li> <li>Move or copy this key (in this case named <code>key.pem</code>) and save it to the file specified in <code>saml.idpCert</code> property of the HedgeDoc configuration or in the enviroment-variable <code>CMD_SAML_CLIENTCERT</code></li> </ol>"},{"location":"guides/auth/saml-keycloak/#use-persistent-identifiers","title":"Use Persistent Identifiers","text":"<p>Instead of using the username as the owner-key in the HedgeDoc database, you can also use a persistent identifier. This allows to change the username, without them loosing access to their notes.</p> <ol> <li>Go to the HedgeDoc-Client in keycloak. Now enable the option \"Force Name ID Format\" and select \"persistent\" as the \"Name ID Format\". </li> <li>For HedgeDoc to be able to use the username and email configured in keycloak, you have to create the following SAML protocol mappers:     2.1. Create a mapper with the type <code>User Property</code>. Set the Name, Property and SAML Attribute Name to <code>username</code>. Now you can specify a friendly name (for example <code>Username</code>)      2.2 Create a mapper with the type <code>User Property</code>. Set the Name, Property and SAML Attribute Name to <code>email</code>. Now you can specify a friendly name (for example <code>E-Mail</code>) </li> </ol> <p>The configured mappers should look like this: </p> <ol> <li>You now have to add the following block to the saml-definition inside your <code>config.json</code>: <pre><code>\"attribute\": {\n\"username\": \"username\"\n\"email\": \"email\",\n}\n</code></pre> It you configure HedgeDoc with enviroment variables, these are the ones you have to set: <pre><code>CMD_SAML_ATTRIBUTE_USERNAME=username\nCMD_SAML_ATTRIBUTE_EMAIL=email\n</code></pre></li> </ol>"},{"location":"guides/auth/saml-onelogin/","title":"Authentication guide - SAML (OneLogin)","text":"<p>Note: This guide was written before the renaming. Just replace <code>HackMD</code> with <code>HedgeDoc</code> in your mind \ud83d\ude03 thanks!</p> <ol> <li> <p>Sign-in or sign-up for an OneLogin account. (available free trial for 2 weeks)</p> </li> <li> <p>Go to the administration page.</p> </li> <li> <p>Select the APPS menu and click on the Add Apps. </p> </li> <li> <p>Find \"SAML Test Connector (SP)\" for template of settings and select it. </p> </li> <li> <p>Edit display name and icons for OneLogin dashboard as you want, and click SAVE. </p> </li> <li> <p>After that other tabs will appear, click the Configuration, and fill out the below items, and click SAVE.</p> <ul> <li>RelayState: The base URL of your HedgeDoc, which is issuer. (last slash is not needed)</li> </ul> <ul> <li>ACS (Consumer) URL Validator: The callback URL of your HedgeDoc. (serverurl + /auth/saml/callback)</li> </ul> <ul> <li>ACS (Consumer) URL: same as above.</li> </ul> <ul> <li>Login URL: login URL(SAML requester) of your CopiMD. (serverurl + /auth/saml) </li> </ul> </li> <li> <p>The registration is completed. Next, click SSO and copy or download the items below.</p> <ul> <li>X.509 Certificate: Click View Details and DOWNLOAD or copy the content of certificate ....(A)</li> </ul> <ul> <li>SAML 2.0 Endpoint (HTTP): Copy the URL ....(B) </li> </ul> </li> <li> <p>In your HedgeDoc server, create IdP certificate file from (A)</p> </li> <li> <p>Add the IdP URL (B) and the Idp certificate file path to your config.json file or pass them as environment variables.</p> <ul> <li> <p><code>config.json</code>:   <pre><code>{\n\"production\": {\n\"saml\": {\n\"idpSsoUrl\": \"https://*******.onelogin.com/trust/saml2/http-post/sso/******\",\n\"idpCert\": \"/path/to/idp_cert.pem\"\n}\n}\n}\n</code></pre></p> <ul> <li>environment variables   <pre><code>CMD_SAML_IDPSSOURL=https://*******.onelogin.com/trust/saml2/http-post/sso/******\nCMD_SAML_IDPCERT=/path/to/idp_cert.pem\n</code></pre></li> </ul> </li> </ul> </li> <li> <p>Try sign-in with SAML from your HedgeDoc sign-in button or OneLogin dashboard (like the screenshot below). </p> </li> </ol>"},{"location":"guides/auth/saml/","title":"Authentication guide - SAML","text":"<p>Note: This guide was written before the renaming. Just replace <code>HackMD</code> with <code>HedgeDoc</code> in your mind \ud83d\ude03 thanks!</p> <p>The basic procedure is the same as the case of OneLogin which is mentioned in OneLogin-Guide. If you want to match your IdP, you can use more configurations as below.</p> <ul> <li>If your IdP accepts metadata XML of the service provider to ease configuration, use this url to download metadata XML:   <code>{{your-serverurl}}/auth/saml/metadata</code> Note: If not accessible from IdP, download to local once and upload to IdP.</li> </ul> <ul> <li> <p>Change the value of <code>issuer</code>, <code>identifierFormat</code> to match your IdP.</p> <ul> <li><code>issuer</code>: A unique id to identify the application to the IdP, which is the base URL of your HedgeDoc as default</li> </ul> <ul> <li><code>identifierFormat</code>: A format of unique id to identify the user of IdP, which is the format based on email address as   default. It is recommend that you use as below.<ul> <li><code>urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress</code> (default)</li> <li><code>urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified</code></li> </ul> </li> </ul> <ul> <li><code>config.json</code>:   <pre><code>{\n\"production\": {\n\"saml\": {\n/* omitted */\n\"issuer\": \"myhedgedoc\"\n\"identifierFormat\": \"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\"\n}\n}\n}\n</code></pre></li> </ul> <ul> <li>environment variables   <pre><code>CMD_SAML_ISSUER=myhedgedoc\nCMD_SAML_IDENTIFIERFORMAT=urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\n</code></pre></li> </ul> </li> </ul> <ul> <li> <p>Change mapping of attribute names to customize the displaying user name and email address to match your IdP.</p> <ul> <li><code>attribute</code>: A dictionary to map attribute names</li> </ul> <ul> <li><code>attribute.id</code>: A primary key of user table for your HedgeDoc</li> </ul> <ul> <li><code>attribute.username</code>: Attribute name of displaying user name on HedgeDoc</li> </ul> <ul> <li><code>attribute.email</code>: Attribute name of email address, which will be also used for Gravatar<ul> <li>Note: Default value of all attributes is NameID of SAML response, which is email address if <code>identifierFormat</code>   is default.</li> </ul> </li> </ul> <ul> <li><code>config.json</code>:   <pre><code>{\n\"production\": {\n\"saml\": {\n/* omitted */\n\"attribute\": {\n\"id\": \"sAMAccountName\",\n\"username\": \"displayName\",\n\"email\": \"mail\"\n}\n}\n}\n}\n</code></pre></li> </ul> <ul> <li>environment variables   <pre><code>CMD_SAML_ATTRIBUTE_ID=sAMAccountName\nCMD_SAML_ATTRIBUTE_USERNAME=nickName\nCMD_SAML_ATTRIBUTE_EMAIL=mail\n</code></pre></li> </ul> </li> </ul> <ul> <li> <p>If you want to control permission by group membership, add group attribute name and required group (allowed) or   external group (not allowed).</p> <ul> <li><code>groupAttribute</code>: An attribute name of group membership</li> </ul> <ul> <li><code>requiredGroups</code>: Group names array for allowed access to HedgeDoc. Use vertical bar to separate for environment   variables.</li> </ul> <ul> <li><code>externalGroups</code>: Group names array for not allowed access to HedgeDoc. Use vertical bar to separate for environment   variables.<ul> <li>Note: Evaluates <code>externalGroups</code> first</li> </ul> </li> </ul> <ul> <li><code>config.json</code>:   <pre><code>{\n\"production\": {\n\"saml\": {\n/* omitted */\n\"groupAttribute\": \"memberOf\",\n\"requiredGroups\": [ \"hedgedoc-users\", \"board-members\" ],\n\"externalGroups\": [ \"temporary-staff\" ]\n}\n}\n}\n</code></pre></li> </ul> <ul> <li>environment variables   <pre><code>CMD_SAML_GROUPATTRIBUTE=memberOf\nCMD_SAML_REQUIREDGROUPS=hedgedoc-users|board-members\nCMD_SAML_EXTERNALGROUPS=temporary-staff\n</code></pre></li> </ul> </li> </ul>"},{"location":"guides/auth/twitter/","title":"Authentication guide - Twitter","text":"<p>Note: This guide was written before the renaming. Just replace <code>HackMD</code> with <code>HedgeDoc</code> in your mind \ud83d\ude03 thanks!</p> <ol> <li> <p>Sign-in or sign-up for a Twitter account</p> </li> <li> <p>Go to the Twitter Application management page here</p> </li> <li> <p>Click on the Create New App button to create a new Twitter app: </p> </li> <li> <p>Fill out the create application form, check the developer agreement box, and click Create Your Twitter Application </p> <p>Note: you may have to register your phone number with Twitter to create a Twitter application</p> <p>To do this Click your profile icon --&gt; Settings and privacy --&gt; Mobile  --&gt; Select Country/region --&gt; Enter phone number --&gt; Click Continue</p> </li> <li> <p>After you receive confirmation that the Twitter application was created, click Keys and Access Tokens </p> </li> <li> <p>Obtain your Twitter Consumer Key and Consumer Secret </p> </li> <li> <p>Add your Consumer Key and Consumer Secret to your <code>config.json</code> file or pass them as environment variables:</p> <ul> <li><code>config.json</code>:   <pre><code>{\n\"production\": {\n\"twitter\": {\n\"consumerKey\": \"esTCJFXXXXXXXXXXXXXXXXXXX\",\n\"consumerSecret\": \"zpCs4tU86pRVXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n}\n}\n}\n</code></pre></li> </ul> <ul> <li>environment variables:   <pre><code>CMD_TWITTER_CONSUMERKEY=esTCJFXXXXXXXXXXXXXXXXXXX\nCMD_TWITTER_CONSUMERSECRET=zpCs4tU86pRVXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n</code></pre></li> </ul> </li> </ol>"},{"location":"references/hfm/","title":"HedgeDoc Flavored Markdown","text":"<p>HedgeDoc mostly follows the CommonMark standard. It shares some extensions with the GFM standard, but for historical reasons HedgeDoc does support not exactly GFM, but a bit more in places (and a bit less in other places).</p> <p>These tables will tell you what exactly we support in HedgeDoc 1.x (HFM 1) and will support in HedgeDoc 2 (HFM 2).</p> <p>Please keep in mind that HedgeDoc 2 is still in development and not functional yet.</p>"},{"location":"references/hfm/#typography","title":"Typography","text":"Feature HFM 1 HFM 2 CommonMark GFM bold italic underline ( with <code>&lt;ins&gt;</code>) ( with <code>&lt;ins&gt;</code>) strikethrough ( with <code>&lt;del&gt;</code>) subscript ( with <code>&lt;sub&gt;</code>) ( with <code>&lt;sub&gt;</code>) superscript ( with <code>&lt;sup&gt;</code>) ( with <code>&lt;sup&gt;</code>) marked ( with <code>&lt;mark&gt;</code>) ( with <code>&lt;mark&gt;</code>)"},{"location":"references/hfm/#extended-typography-features","title":"Extended typography features","text":"Feature HFM 1 HFM 2 CommonMark GFM heading inline code indented code blocks code block with language1 code block with extra features2 block quote name tag (<code>[name=...]</code>) ()3 time tag (<code>[time=...]</code>) ()3 color tag (<code>[color=...]</code>) ()3 unorderd list ordered list task list defition list emoji Unicode 6.1 Unicode 13 ForkAwesome  with <code>&lt;i class='fa'&gt;</code>  with shortcodes LaTeX 4 5"},{"location":"references/hfm/#links-images","title":"Links &amp; Images","text":"Feature HFM 1 HFM 2 CommonMark GFM link link reference link title autolink with <code>&lt;&gt;</code> autolink without <code>&lt;&gt;</code> footnotes image image with given size ( with <code>&lt;img&gt;</code>) ( with <code>&lt;img&gt;</code>) table of contents"},{"location":"references/hfm/#structural-elements","title":"Structural elements","text":"Feature HFM 1 HFM 2 CommonMark GFM table ( with <code>&lt;table&gt;</code>) horizontal line collapsable block ( with <code>&lt;details&gt;</code>) ( with <code>&lt;details&gt;</code>) ( with <code>&lt;details&gt;</code>) Alerts"},{"location":"references/hfm/#embeddings","title":"Embeddings","text":"<p>HFM1 included support for certain embeddings of external content. These were defined in markdown by the uncommon <code>{%keyword parameter %}</code> syntax.</p> <p>Instead of this uncommon syntax, HFM2 uses just plain links to external content and creates embeddings for supported providers.</p> Feature HFM 1 HFM 2 CommonMark GFM PDF (<code>{%pdf ... %}</code>) removed YouTube (<code>{%youtube ... %}</code>) with plain link6 Vimeo (<code>{%vimeo ... %}</code>) with plain link6 Slideshare (<code>{%slideshare ... %}</code>) removed Speakerdeck (<code>{%speakerdeck ... %}</code>) removed GitHub Gist (<code>{%gist ... %}</code>) with plain link6"},{"location":"references/hfm/#html","title":"HTML","text":"<p>Besides the basic HTML typography elements (<code>&lt;p&gt;</code>, <code>&lt;a&gt;</code>, <code>&lt;b&gt;</code>, <code>&lt;ins&gt;</code>, <code>&lt;del&gt;</code>) the following more special HTML elements are supported by some specification.</p> Feature HFM 1 HFM 2 CommonMark GFM <code>&lt;title&gt;</code> <code>&lt;textarea&gt;</code> <code>&lt;style&gt;</code> <code>&lt;xmp&gt;</code> <code>&lt;iframe&gt;</code> <code>&lt;noembed&gt;</code> <code>&lt;noframes&gt;</code> <code>&lt;script&gt;</code> <code>&lt;plaintext&gt;</code> <ol> <li> <p>Code-blocks with a given language are rendered with syntax-highlighting for the code.\u00a0\u21a9</p> </li> <li> <p>Several special \"language\" keywords can be used for rendering diagrams, charts, etc.\u00a0\u21a9</p> </li> <li> <p>Use of these tags is only supported within blockquotes or (un)ordered lists.\u00a0\u21a9\u21a9\u21a9</p> </li> <li> <p>LaTeX is rendered with MathJax.\u00a0\u21a9</p> </li> <li> <p>LaTeX is rendered with KaTeX.\u00a0\u21a9</p> </li> <li> <p>The special syntax is deprecated but will continue to work. However a plain link to the content will generate the same embedding and is preferred.\u00a0\u21a9\u21a9\u21a9</p> </li> </ol>"},{"location":"references/slide-options/","title":"Slide Separators","text":"<p>If you're getting started with reveal.js slides, there are a few things you need to know.</p> <p>There are two types of slides, those that transition horizontally and those that transition vertically (subslides).</p> <p>The following separators are used for each in the HedgeDoc syntax:</p> <p><pre><code># First Slide\n\n---\n\n# Next slide\n\n----\n\n## Subslide\n</code></pre> as you can see, horizontal transitions are separated by <code>---</code> and vertical transitions by <code>----</code></p>"},{"location":"references/slide-options/#basic-yaml-header","title":"Basic YAML header","text":"<p>It's possible to customise the slide options using the YAML header in the slide markdown.</p> <p>eg: <pre><code>---\ntitle: Example Slide\ntags: presentation\nslideOptions:\ntheme: solarized\ntransition: 'fade'\n# parallaxBackgroundImage: 'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg'\n---\n</code></pre> make sure to have two spaces only at the start of the listed slide options.</p> <p>you can comment out options with a <code>#</code></p>"},{"location":"references/slide-options/#some-other-options","title":"Some other options","text":"<pre><code># Display controls in the bottom right corner\ncontrols: true\n\n# Display a presentation progress bar\nprogress: true\n\n# Set default timing of 2 minutes per slide\ndefaultTiming: 120\n\n# Display the page number of the current slide\nslideNumber: false\n\n# Push each slide change to the browser history\nhistory: false\n\n# Enable keyboard shortcuts for navigation\nkeyboard: true\n\n# Enable the slide overview mode\noverview: true\n\n# Vertical centering of slides\ncenter: true\n\n# Enables touch navigation on devices with touch input\ntouch: true\n\n# Loop the presentation\nloop: false\n\n# Change the presentation direction to be RTL\nrtl: false\n\n# Randomizes the order of slides each time the presentation loads\nshuffle: false\n\n# Turns fragments on and off globally\nfragments: true\n\n# Flags if the presentation is running in an embedded mode,\n# i.e. contained within a limited portion of the screen\nembedded: false\n\n# Flags if we should show a help overlay when the questionmark\n# key is pressed\nhelp: true\n\n# Flags if speaker notes should be visible to all viewers\nshowNotes: false\n\n# Global override for autolaying embedded media (video/audio/iframe)\n# - null: Media will only autoplay if data-autoplay is present\n# - true: All media will autoplay, regardless of individual setting\n# - false: No media will autoplay, regardless of individual setting\nautoPlayMedia: null\n\n# Number of milliseconds between automatically proceeding to the\n# next slide, disabled when set to 0, this value can be overwritten\n# by using a data-autoslide attribute on your slides\nautoSlide: 0\n\n# Stop auto-sliding after user input\nautoSlideStoppable: true\n\n# Use this method for navigation when auto-sliding\nautoSlideMethod: Reveal.navigateNext\n\n# Enable slide navigation via mouse wheel\nmouseWheel: false\n\n# Hides the address bar on mobile devices\nhideAddressBar: true\n\n# Opens links in an iframe preview overlay\npreviewLinks: false\n\n# Transition style\ntransition: 'slide' \n# none/fade/slide/convex/concave/zoom\n\n# Transition speed\ntransitionSpeed: 'default'\n# default/fast/slow\n\n# Transition style for full page slide backgrounds\nbackgroundTransition: 'fade'\n# none/fade/slide/convex/concave/zoom\n\n# Number of slides away from the current that are visible\nviewDistance: 3\n\n# Parallax background image\nparallaxBackgroundImage: ''\n# e.g. \"'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg'\"\n\n# Parallax background size\nparallaxBackgroundSize: ''\n# CSS syntax, e.g. \"2100px 900px\"\n\n# Number of pixels to move the parallax background per slide\n# - Calculated automatically unless specified\n# - Set to 0 to disable movement along an axis\nparallaxBackgroundHorizontal: null\nparallaxBackgroundVertical: null\n\n# The display mode that will be used to show slides\ndisplay: 'block'\n</code></pre>"},{"location":"references/slide-options/#customising-individual-slides","title":"Customising individual slides","text":"<p>custom background image:</p> <pre><code>---\n\n&lt;!-- .slide: data-background=\"https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg\" --&gt;\n#### testslide\n\n---\n</code></pre>"},{"location":"references/url-scheme/","title":"URL scheme","text":"<p>HedgeDoc has three different modes for viewing a stored note. Each mode has a slightly different URL for accessing it. This document gives an overview about these URLs. We assume that you replace <code>pad.example.com</code> with the domain of your instance.</p>"},{"location":"references/url-scheme/#default-random","title":"Default (random)","text":"<p>When you create a new note by clicking the \"New note\" button, your note is given a long random id and a random short-id. The long id is needed for accessing the editor and the live-update view. The short-id is used for the \"published\" version of a note that is read-only and does not update in realtime as well as for the presentation mode.</p> example URL prefix mode content updates pad.example.com/Ndmv3oCyREKZMjSGR9uhnQ none editor in realtime pad.example.com/s/ByXF7k-YI s/ read-only version on reload pad.example.com/p/ByXF7k-YI p/ presentation mode on reload"},{"location":"references/url-scheme/#freeurl-mode","title":"FreeURL mode","text":"<p>If the setting <code>CMD_ALLOW_FREEURL</code> is enabled, users may create notes with a custom alias URL by just visiting the editor version of a custom alias. The published version and the presentation mode may also be accessed with the custom alias.</p> example URL prefix mode content updates pad.example.com/my-awesome-note none editor in realtime pad.example.com/s/my-awesome-note s/ read-only version on reload pad.example.com/p/my-awesome-note p/ presentation mode on reload"},{"location":"references/url-scheme/#different-editor-modes","title":"Different editor modes","text":"<p>The editor has three different sub-modes. All of these update the content in realtime.</p> example URL icon in the navbar behaviour pad.example.com/longnoteid?edit pencil Full-screen markdown editor for the content pad.example.com/longnoteid?view eye Full-screen view of the note without the editor pad.example.com/longnoteid?both columns markdown editor and view mode side-by-side"},{"location":"references/yaml-metadata/","title":"Supported YAML metadata","text":"<p>With a YAML frontmatter you can change certain metadata and aspects of your note.</p> <p>First you need to insert syntax like this at the start of the note: <pre><code>---\nYAML metas\n---\n</code></pre></p> <p>Replace the \"YAML metas\" in this section with any YAML options as below. You can also refer to this note's source code.</p>"},{"location":"references/yaml-metadata/#title","title":"title","text":"<p>This option will set the note title which prior than content title.</p> <p>default: not set</p> <p>Example <pre><code>title: meta title\n</code></pre></p>"},{"location":"references/yaml-metadata/#description","title":"description","text":"<p>This option will set the note description as a <code>&lt;meta name=\"description\"&gt;</code> tag. This only affects the Publish function.</p> <p>default: not set</p> <p>Example <pre><code>description: meta description\n</code></pre></p>"},{"location":"references/yaml-metadata/#tags","title":"tags","text":"<p>This option will set the tags which prior than content tags.</p> <p>default: not set</p> <p>Example <pre><code>tags: features, cool, updated\n</code></pre></p>"},{"location":"references/yaml-metadata/#robots","title":"robots","text":"<p>This option will give below meta in the note head meta: <pre><code>&lt;meta name=\"robots\" content=\"your_meta\"&gt;\n</code></pre> So you can prevent any search engine index your note by set <code>noindex, nofollow</code>.</p> <p>default: not set</p> <p>Example <pre><code>robots: noindex, nofollow\n</code></pre></p>"},{"location":"references/yaml-metadata/#lang","title":"lang","text":"<p>This option will set the language of the note. Setting the language helps the browser to apply rules such as typography correctly. You can find your the language code in ISO 639-1 standard: https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes</p> <p>default: not set (which will be en)</p> <p>Example <pre><code>lang: ja-jp\n</code></pre></p>"},{"location":"references/yaml-metadata/#dir","title":"dir","text":"<p>This option specifies the direction of the text in this note. You can only use whether <code>rtl</code> or <code>ltr</code>. Look more at here: http://www.w3.org/International/questions/qa-html-dir</p> <p>default: not set (which will be ltr)</p> <p>Example <pre><code>dir: rtl\n</code></pre></p>"},{"location":"references/yaml-metadata/#breaks","title":"breaks","text":"<p>This option means the hardbreaks in the note will be parsed or be ignore. The original markdown syntax breaks only if you put space twice, but HedgeDoc choose to breaks every time you enter a break. You can only use whether <code>true</code> or <code>false</code>.</p> <p>default: not set (which will be true)</p> <p>Example <pre><code>breaks: false\n</code></pre></p>"},{"location":"references/yaml-metadata/#ga","title":"GA","text":"<p>This option allows you to enable Google Analytics with your ID.</p> <p>default: not set (which won't enable)</p> <p>Example <pre><code>GA: UA-12345667-8\n</code></pre></p>"},{"location":"references/yaml-metadata/#disqus","title":"disqus","text":"<p>This option allows you to enable Disqus with your shortname.</p> <p>default: not set (which won't enable)</p> <p>Example <pre><code>disqus: hedgedoc\n</code></pre></p>"},{"location":"references/yaml-metadata/#type","title":"type","text":"<p>This option allows you to switch the document view to the slide preview, to simplify live editing of presentations.</p> <p>default: not set</p> <p>Example: <pre><code>type: slide\n</code></pre></p>"},{"location":"references/yaml-metadata/#slideoptions","title":"slideOptions","text":"<p>This option allows you to provide custom options to slide mode.</p> <p>Slide mode is achieved using Reveal, an HTML presentation framework. The current stable version of HedgeDoc uses Reveal 3.</p> <p>See the document below for more details on the available slide options: https://github.com/hakimel/reveal.js/blob/3.9.2/README.md#configuration</p> <p>You could also set slide theme which named in below css files: https://github.com/hakimel/reveal.js/tree/master/css/theme</p> <p>Notice: always use two spaces as indention in YAML metadata!</p> <p>default: not set (which use default slide options)</p> <p>Example <pre><code>slideOptions:\n  transition: fade\n  theme: white\n</code></pre></p>"},{"location":"references/yaml-metadata/#opengraph","title":"opengraph","text":"<p>This option allows you to override the default generated opengraph metadata. See the OpenGraph protocol documentation for more information.</p> <p>Notice: always use two spaces as indention in YAML metadata!</p> <p>default: not set (uses auto-generated metadata)</p> <p>Example <pre><code>opengraph:\n  title: Special title for OpenGraph protocol\n  image: https://dummyimage.com/600x600/000/fff\n  image:type: image/png\n</code></pre></p>"},{"location":"setup/community/","title":"Community Installation Methods","text":"<p>The HedgeDoc community has created and tested many options for deploying HedgeDoc on other platforms or operating systems. You can check them out below. Feel free to create a PR to add your tested community installation method.</p> <p>These are not officially supported by the HegeDoc maintainers. If you encounter issues or have questions, please first reach out to downstream packagers.</p>"},{"location":"setup/community/#container-deployments","title":"Container Deployments","text":""},{"location":"setup/community/#linuxserverio-docker-image","title":"LinuxServer.io Docker Image","text":"<p>LinuxServer.io have created an Alpine-based multi-arch container image for x86-64, arm64 and armhf.</p> <ul> <li>It supports all the environment variables detailed in the configuration documentation to modify it according to your needs.</li> <li>It gets rebuilt on new releases from HedgeDoc and also weekly if necessary to update any other package changes in the underlying container, making it easy to keep your HedgeDoc instance up to date.</li> <li>It also details how to easily utilize Docker networking to reverse proxy HedgeDoc using their SWAG docker image</li> </ul> <p>In order to contribute check the LinuxServer.io GitHub repository for HedgeDoc. And to find all tags and versions of the image, check the Docker Hub repository.</p>"},{"location":"setup/community/#helm-chart","title":"Helm Chart","text":"<p>You can deploy HedgeDoc on your Kubernetes cluster using <code>helm</code>.</p> <p>HedgeDoc Helm Chart by nicholaswilde on Artifact Hub Website Source Code</p>"},{"location":"setup/community/#one-click-installer","title":"One-click Installer","text":""},{"location":"setup/community/#heroku","title":"Heroku","text":"<p>You can quickly setup a sample Heroku HedgeDoc application by clicking the button below.</p> <p></p>"},{"location":"setup/community/#yunohost","title":"YunoHost","text":"<p>HedgeDoc is available as a 1-click install on YunoHost.  YunoHost is a Debian GNU/Linux based distribution packaged with free software that automates the installation of a personal web server.</p> <p></p> <p>The source code for the package can be found here.</p>"},{"location":"setup/community/#cloudron","title":"Cloudron","text":"<p>HedgeDoc is available as a 1-click install on Cloudron.  Cloudron makes it easy to run apps like HedgeDoc on your server and keep them up-to-date and secure.</p> <p></p> <p>The source code for the package can be found here.</p> <p>There is a demo instance (username: cloudron password: cloudron) where you can experiment with running HedgeDoc.</p>"},{"location":"setup/community/#pikapods","title":"PikaPods","text":"<p>PikaPods offers simple hosting for open source apps. Run HedgeDoc within seconds using the button below. This will run the official Docker image from quay.io.</p> <p></p>"},{"location":"setup/community/#distribution-packages","title":"Distribution Packages","text":""},{"location":"setup/community/#arch-linux","title":"Arch Linux","text":"<p>HedgeDoc is available in the Arch Linux community repository.</p> <p>Link to the package</p>"},{"location":"setup/community/#freebsd","title":"FreeBSD","text":"<p>HedgeDoc is available in the FreeBSD ports repository. After installation, customise your <code>config.json</code> file, referring to the official HedgeDoc documentation.</p> <p>Ports Repository</p>"},{"location":"setup/docker/","title":"HedgeDoc Docker Image","text":"<p>Requirements on your server</p> <ul> <li>Git</li> <li>Docker 17.03.1 or higher</li> <li>Docker Compose</li> </ul> <p>The official docker images are available on quay.io. We currently only support the <code>amd64</code> architecture.</p> <p>The easiest way to get started with HedgeDoc and Docker is to use the following <code>docker-compose.yml</code>:</p> <p>Warning</p> <p>This is a minimal example to get started quickly and not intended for production use.</p> <p><pre><code>version: '3'\nservices:\ndatabase:\nimage: postgres:13.4-alpine\nenvironment:\n- POSTGRES_USER=hedgedoc\n- POSTGRES_PASSWORD=password\n- POSTGRES_DB=hedgedoc\nvolumes:\n- database:/var/lib/postgresql/data\nrestart: always\napp:\n# Make sure to use the latest release from https://hedgedoc.org/latest-release\nimage: quay.io/hedgedoc/hedgedoc:1.9.9\nenvironment:\n- CMD_DB_URL=postgres://hedgedoc:password@database:5432/hedgedoc\n- CMD_DOMAIN=localhost\n- CMD_URL_ADDPORT=true\nvolumes:\n- uploads:/hedgedoc/public/uploads\nports:\n- \"3000:3000\"\nrestart: always\ndepends_on:\n- database\nvolumes:\ndatabase:\nuploads:\n</code></pre> After executing <code>docker-compose up</code>, HedgeDoc should be available at http://localhost:3000. You can now continue to configure your container with environment variables. Check out the configuration docs for more details.</p>"},{"location":"setup/docker/#file-permissions","title":"File Permissions","text":"<p>By default, HedgeDoc will change the permissions of the uploads directory to <code>0700</code> on every start of the Docker container. This is OK if you keep the files in a named volume, but if you want to serve the files from a webserver on your host (e.g. an Nginx reverse proxy) the webserver may not have the permission to read the files.</p> <p>To fix this, you can set the <code>UPLOADS_MODE</code> env variable to something other than <code>0700</code>.</p>"},{"location":"setup/docker/#upgrading","title":"Upgrading","text":"<p>Warning</p> <p>Before you upgrade, always read the release notes. You can find them on our releases page.</p> <p>Upgrading to 1.7</p> <p>Together with changing the name to \"HedgeDoc\" the default username, password and database name have been changed in <code>docker-compose.yml</code>.</p> <p>In order to migrate the existing database to the new default credentials, run <pre><code>docker-compose exec database createuser --superuser -Uhackmd postgres\ndocker-compose exec database psql -Upostgres -c \"alter role hackmd rename to hedgedoc; alter role hedgedoc with password 'password'; alter database hackmd rename to hedgedoc;\"\n</code></pre> before running <code>docker-compose up</code>.</p> <p>You can upgrade to the latest release by stopping the containers and changing the referenced image version in <code>docker-compose.yml</code>. Then run <code>docker-compose up</code> to start HedgeDoc again. </p>"},{"location":"setup/docker/#migrating-from-codimd-hackmd","title":"Migrating from CodiMD &amp; HackMD","text":"<p>If you currently use CodiMD or HackMD, you should be able to swap the docker image for ours. See the general migration hints for compatibility details.</p>"},{"location":"setup/docker/#backup","title":"Backup","text":"<p>If you use a PostgreSQL database, you can leverage this command to create a backup: </p> <pre><code> docker-compose exec database pg_dump hedgedoc -U hedgedoc &gt; backup.sql\n</code></pre>"},{"location":"setup/docker/#restore","title":"Restore","text":"<p>If you want to restore your PostgreSQL backup, run these commands before starting the application for the first time:</p> <pre><code>docker-compose up -d database\ncat backup.sql | docker exec -i $(docker-compose ps -q database) psql -U hedgedoc\n</code></pre>"},{"location":"setup/getting-started/","title":"Getting started","text":"<p>Thank you for choosing HedgeDoc! To set up your instance follow these steps:</p> <ol> <li>Choose an installation method and follow the instructions</li> <li>Configure your reverse proxy</li> <li>Configure HedgeDoc</li> <li>If you didn't disable local accounts, you can use the \"Sign In\" button to    create an account, login and start using HedgeDoc.</li> </ol> <p>Follow us on Mastodon or Twitter for updates.</p>"},{"location":"setup/getting-started/#upgrading-hedgedoc","title":"Upgrading HedgeDoc","text":"<p>HedgeDoc follows Semantic Versioning. This means that minor and patch releases should not introduce user-facing backwards-incompatible changes.</p> <p>You can find more details about upgrading in the instructions of your installation method.</p> <p>Warning</p> <p>Before you upgrade, always read the release notes. You can find them on our releases page.</p>"},{"location":"setup/getting-started/#migrating-from-codimd-hackmd","title":"Migrating from CodiMD &amp; HackMD","text":"<p>Migrating from CodiMD &lt;= 1.6.0 or HackMD &lt;= 1.1.0 to HedgeDoc should be safe, just make sure to read the release notes. A particular issue that has come up is when handling TLS connections using a reverse proxy. You must set the <code>X-Forwarded-Proto</code> header correctly.</p> <p>Migrating from more recent versions of CodiMD is not guaranteed to work, although some community members reported success migrating from CodiMD 2.2. If you successfully migrated from other versions, please report your upgrade results in the community forum.</p>"},{"location":"setup/manual-setup/","title":"Manual Installation","text":"<p>Requirements on your server</p> <ul> <li>Node.js 16 or later   We recommend to run HedgeDoc with the latest LTS release of Node.js.</li> <li>Database (PostgreSQL, MySQL, MariaDB, SQLite)   The database must use charset <code>utf8</code>. This is typically the default in PostgreSQL and SQLite.   In MySQL and MariaDB UTF-8 might need to be set with <code>alter database &lt;DBNAME&gt; character set utf8 collate utf8_bin;</code>   Be aware of older MySQL and MariaDB versions which sometimes use shorter representations of UTF-8 than 4 bytes.   This can break if symbols with more bytes are used.   You can use <code>alter database &lt;DBNAME&gt; character set utf8mb4 COLLATE utf8mb4_unicode_ci</code> to be on the safe side.</li> <li>NPM (and its dependencies, node-gyp)</li> <li>Yarn 3: Running <code>corepack enable</code> once should be sufficient, Node.js will then   automatically use the correct version of Yarn. If <code>corepack</code> is not available, try <code>npm i -g corepack</code> first.   See the official docs for more information and other options.</li> <li>Bash (for the setup script)</li> <li>For building the HedgeDoc frontend you need a machine with at least 2 GB RAM.<ul> <li>Starting with release 1.7 the release tarball includes the prebuilt frontend, so building it yourself is not necessary.</li> </ul> </li> </ul> <ol> <li>Check if you meet the requirements at the top of this document.</li> <li>Download the latest release and extract it. Alternatively, you can use Git to clone the repository and checkout a release, e.g. with <code>git clone -b 1.9.9 https://github.com/hedgedoc/hedgedoc.git</code>.</li> <li>Enter the directory and execute <code>bin/setup</code>, which will install the dependencies and create example configs.</li> <li>Configure HedgeDoc: To get started, you can use this minimal <code>config.json</code>:    <pre><code>{\n\"production\": {\n\"db\": {\n\"dialect\": \"sqlite\",\n\"storage\": \"./db.hedgedoc.sqlite\"\n},\n\"urlAddPort\": true,\n\"domain\": \"localhost\"\n}\n}\n</code></pre>    It's also possible to use environment variables.    For details, have a look at the configuration documentation.</li> <li> If you use the release tarball for 1.7.0 or newer, this step can be skipped.    Build the frontend bundle by running <code>yarn install --immutable</code> and then <code>yarn build</code>. The extra <code>yarn install --immutable</code> is necessary as <code>bin/setup</code> does not install the build dependencies.</li> <li>It is recommended to start your server manually once: <pre><code>NODE_ENV=production yarn start\n</code></pre>    This way it's easier to see warnings or errors that might occur. You can leave out <code>NODE_ENV=production</code> for development. </li> <li>If you use the example config, HedgeDoc should now be available at http://localhost:3000.</li> <li>Run the server as you like (node, forever, pm2, systemd, Init-Scripts).    See below for an example using systemd.</li> </ol>"},{"location":"setup/manual-setup/#upgrading","title":"Upgrading","text":"<p>Warning</p> <p>Before you upgrade, always read the release notes. You can find them on our releases page.</p> <p>If you want to upgrade HedgeDoc from an older version, follow these steps:</p> <ol> <li>Check if you still meet the requirements at the top of this document.</li> <li>Ensure you read the release notes of all versions between your current version    and the latest release.</li> <li>Fully stop your old HedgeDoc server.</li> <li>Download the new release and extract it over the old directory. If you use Git, you can check out the new tag with e.g. <code>git fetch origin &amp;&amp; git checkout 1.9.9</code></li> <li>Run <code>bin/setup</code>. This will take care of installing dependencies. It is safe to run on an existing installation.</li> <li> If you used the release tarball for 1.7.0 or newer, this step can be skipped.    Build the frontend bundle by running <code>yarn install --immutable</code> and <code>yarn build</code>. The extra <code>yarn install --immutable</code> is necessary as <code>bin/setup</code> does not install the       build dependencies.</li> <li>It is recommended to start your server manually once:    <pre><code>NODE_ENV=production yarn start\n</code></pre>    This way it's easier to see warnings or errors that might occur.</li> <li>You can now restart the HedgeDoc server!</li> </ol>"},{"location":"setup/manual-setup/#systemd-unit-example","title":"Systemd Unit Example","text":"<p>Using the unit file below, you can run HedgeDoc as a systemd service.</p> <p>Warning</p> <ul> <li>In this example, you must configure HedgeDoc using the <code>config.json</code> file and the  <code>production</code> key.</li> <li>Make sure the user and group <code>hedgedoc</code> exists and has appropriate permissions in the directory you installed HedgeDoc in or change the <code>User</code> and <code>Group</code> settings in the unit file.</li> <li>Make sure <code>WorkingDirectory</code> points to the directory you installed HedgeDoc in.</li> <li>Make sure <code>ReadWritePaths</code> contains all directories HedgeDoc might write to. This may include the <code>public/uploads</code> folder if you configured local storage. If you use SQLite, you must also include the directory where the database file is saved. Do not save the SQLite file in the root directory of the HedgeDoc installation, but create a subfolder like <code>db</code>!</li> <li>If you use an external database like PostgreSQL or MariaDB, make sure to add a corresponding <code>After</code> statement.</li> </ul> <pre><code>[Unit]\nDescription=HedgeDoc - The best platform to write and share markdown.\nDocumentation=https://docs.hedgedoc.org/\nAfter=network.target\n# Uncomment if you use MariaDB/MySQL\n# After=mysql.service\n# Uncomment if you use PostgreSQL\n# After=postgresql.service\n\n[Service]\nType=exec\nEnvironment=NODE_ENV=production\nRestart=always\nRestartSec=2s\nExecStart=/usr/bin/yarn start\nCapabilityBoundingSet=\nNoNewPrivileges=true\nPrivateDevices=true\nRemoveIPC=true\nLockPersonality=true\nProtectControlGroups=true\nProtectKernelTunables=true\nProtectKernelModules=true\nProtectKernelLogs=true\nProtectClock=true\nProtectHostname=true\nProtectProc=noaccess\nRestrictRealtime=true\nRestrictSUIDSGID=true\nRestrictNamespaces=true\nRestrictAddressFamilies=AF_UNIX AF_INET AF_INET6\nProtectSystem=strict\nProtectHome=true\nPrivateTmp=true\nSystemCallArchitectures=native\nSystemCallFilter=@system-service\n\n# You may have to adjust these settings\nUser=hedgedoc\nGroup=hedgedoc\nWorkingDirectory=/opt/hedgedoc\n\n# Example: local storage for uploads and SQLite\n# ReadWritePaths=/opt/hedgedoc/public/uploads /opt/hedgedoc/db\n\n[Install]\nWantedBy=multi-user.target\n</code></pre>"}]}